<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://jamesu.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jamesu.dev/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2021-03-14T23:13:25+09:00</updated><id>https://jamesu.dev/</id><title type="html">Jamesu Devlog</title><subtitle>Dev Blog by James Minsu Jeon</subtitle><author><name>jamesujeon</name><email>jamesujeon@gmail.com</email></author><entry><title type="html">TIL 32: 중복으로 Delegate 사용하기</title><link href="https://jamesu.dev/posts/2021/03/11/til-32-using-delegate-duplicately/" rel="alternate" type="text/html" title="TIL 32: 중복으로 Delegate 사용하기" /><published>2021-03-11T00:00:00+09:00</published><updated>2021-03-11T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/03/11/til-32-using-delegate-duplicately</id><content type="html" xml:base="https://jamesu.dev/posts/2021/03/11/til-32-using-delegate-duplicately/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;내부 로직은 스스로(&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;)를 부모의 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; 프로퍼티에 할당한다.&lt;/li&gt;
  &lt;li&gt;외부 로직은 프록시와 포워딩을 통해 이벤트와 연동되도록 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;일반적인-방법으로-delegate를-사용할-때의-문제점&quot;&gt;일반적인 방법으로 Delegate를 사용할 때의 문제점&lt;/h2&gt;

&lt;p&gt;커스텀 클래스를 정의하다보면, 내부 로직을 정의하고 스스로(&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;)를 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; 프로퍼티에 대입해 사용할 때가 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;에서 제공하는 방법이 Delegate를 이용하게끔 강제하는 경우가 있기 때문이다.&lt;/p&gt;

&lt;p&gt;예를 들어, 커스텀 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; 클래스를 정의할 때 텍스트 입력을 계속 추적하면서
경우에 따라 입력 방지를 처리하고 싶을 때 Notification으로 처리를 할 수 없고,
&lt;code class=&quot;highlighter-rouge&quot;&gt;UITextFieldDelegate&lt;/code&gt;를 구현해 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; 프로퍼티에 대입해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; 프로퍼티는 하나의 구현체만 가리킬 수 있기 때문에,
해당 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextFieldDelegate&lt;/code&gt;를 외부에서 구현해 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; 프로퍼티에 대입하게 되면
기존에 스스로(&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;)를 대입했던 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;는 덮어씌워지기 때문에 내부에서 정의한 로직은 동작하지 않게 된다.&lt;/p&gt;

&lt;p&gt;커스텀 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; 클래스를 정의하면서 의도했던 내부 로직은 더 이상 동작하지 않기 때문에 원하던 방식은 아닐 것이다.
그렇다면, &lt;strong&gt;내부 로직도 수행되면서 적절하게 외부 로직도 수행되게 하는 방법은 없을까&lt;/strong&gt;?&lt;/p&gt;

&lt;h2 id=&quot;delegate-포워딩하기&quot;&gt;Delegate 포워딩하기&lt;/h2&gt;

&lt;p&gt;구글링을 열심히 하다보니 &lt;a href=&quot;https://stackoverflow.com/questions/43679859/shouldchangetext-not-called-for-uitextfield-when-using-hardware-keyboard&quot; target=&quot;_blank&quot;&gt;원하던 답&lt;/a&gt;을 찾게 되었다.&lt;br /&gt;
내부 로직은 원래대로 &lt;strong&gt;스스로(&lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;)를 부모의 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; 프로퍼티에 할당&lt;/strong&gt;하고,
외부 로직은 &lt;strong&gt;프록시와 포워딩&lt;/strong&gt;을 통해 추가적으로 수행하게 만들 수 있다.&lt;/p&gt;

&lt;p&gt;위 답변을 보면, 다음과 같이 커스텀 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt; 프로퍼티가 프록시 역할을 하도록 정의한 것을 볼 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;realDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextFieldDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Keep track of the text field's real delegate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextFieldDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelegate&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newValue&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;외부에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;에 접근할 때는 부모의 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;가 아닌 내부 전용 프로퍼티인 &lt;code class=&quot;highlighter-rouge&quot;&gt;realDelegate&lt;/code&gt;에 접근하게 된다.
이러고 생성자에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;super.delegate = self&lt;/code&gt;와 같은 코드를 통해 부모의 &lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;만 접근하도록 할 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 다음과 같이 포워딩을 함으로써 특정 이벤트가 발생했을 때 외부에서만 정의한 로직이 있는 경우 수행할 수 있도록 해준다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forwardingTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;realDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;responds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelegate&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forwardingTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;responds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Selector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;realDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;responds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;responds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;특정 이벤트에 대해 내부 로직을 수행하면서 추가적으로 외부 로직이 호출되기 원한다면,
&lt;code class=&quot;highlighter-rouge&quot;&gt;realDelegate&lt;/code&gt;를 통해 외부 로직도 호출해줘야 한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// This only allows numbers to be typed into the text field.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Of course this can be changed to do whatever validation you need in this custom text field&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldChangeCharactersIn&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replacementString&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rangeOfCharacter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CharacterSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decimalDigits&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inverted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Not a number - fail&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The string is valid, now let the real delegate decide&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;responds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textField(_:shouldChangeCharactersIn:replacementString:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shouldChangeCharactersIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;replacementString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위와 같은 방식은 Objective-C에서도 문법만 달라지고 로직은 동일하게 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;커스텀 UI를 만들면 만들수록 새로 알아가는 개념들이 많아지고 있어 재밌고 뿌듯한 기분이 든다. 🤓&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="swift" /><category term="objective-c" /><summary type="html">TL;DR</summary></entry><entry><title type="html">프로그래머스 문제 풀이: 42576 - 완주하지 못한 선수</title><link href="https://jamesu.dev/posts/2021/03/10/programmers-problem-solving-42576/" rel="alternate" type="text/html" title="프로그래머스 문제 풀이: 42576 - 완주하지 못한 선수" /><published>2021-03-10T00:00:00+09:00</published><updated>2021-03-10T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/03/10/programmers-problem-solving-42576</id><content type="html" xml:base="https://jamesu.dev/posts/2021/03/10/programmers-problem-solving-42576/">&lt;p&gt;&lt;img src=&quot;assets/programmers_42576.png&quot; alt=&quot;42576 - 완주하지 못한 선수&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42576&quot; target=&quot;_blank&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;동명이인이 있을 수 있다는 것에 주의해 문제를 풀어야 한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;completion&lt;/code&gt;의 길이가 &lt;code class=&quot;highlighter-rouge&quot;&gt;participant&lt;/code&gt;의 길이보다 1이 작으므로,
&lt;code class=&quot;highlighter-rouge&quot;&gt;completion&lt;/code&gt; 배열을 순회하며 &lt;code class=&quot;highlighter-rouge&quot;&gt;participant&lt;/code&gt; 배열에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;remove&lt;/code&gt; 함수로 한명씩 제거하면 최종적으로 1명이 남게 된다.
그 1명이 완주하지 못한 선수가 된다.&lt;/p&gt;

&lt;p&gt;하지만, 이렇게 풀면 배열의 길이가 아주 큰 경우,
&lt;code class=&quot;highlighter-rouge&quot;&gt;completion&lt;/code&gt; 배열을 순회하는 것과 &lt;code class=&quot;highlighter-rouge&quot;&gt;participant&lt;/code&gt; 배열에서 제거하기 위해 순회하는 것을 합쳐
오랜 시간이 걸리므로, 최악의 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt;의 시간복잡도가 될 수 있다.&lt;/p&gt;

&lt;p&gt;따라서, &lt;code class=&quot;highlighter-rouge&quot;&gt;completion&lt;/code&gt; 배열과 &lt;code class=&quot;highlighter-rouge&quot;&gt;participant&lt;/code&gt; 배열을 &lt;strong&gt;이름을 키로 가지고 인원을 값으로 가지는 Dictionary&lt;/strong&gt;로 변형해
인원을 감소시키는 방식으로 순회한다면, 시간복잡도가 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;으로 줄어들 수 있다.&lt;/p&gt;

&lt;p&gt;Python에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;collections&lt;/code&gt; 모듈의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; 클래스를 사용한다면,
&lt;strong&gt;요소를 키로 가지고 빈도수를 값으로 가지는 Dictionary&lt;/strong&gt;로 쉽게 변형시킬 수 있다.
그리고 두 &lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; 객체의 &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; 연산을 통해 차집합 효과를 낼 수 있다.&lt;/p&gt;

&lt;p&gt;최종적으로 빈도수가 1인 하나의 요소만 남게 되고, 해당 요소가 선수의 이름에 해당하므로 완주하지 못한 선수를 손쉽게 구할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;collections&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;participant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="programmers" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">TIL 31: Objective-C의 Block 사용 시 메모리 누수 주의!</title><link href="https://jamesu.dev/posts/2021/03/09/til-31-be-careful-of-memory-leaks-in-block-of-objective-c/" rel="alternate" type="text/html" title="TIL 31: Objective-C의 Block 사용 시 메모리 누수 주의!" /><published>2021-03-09T00:00:00+09:00</published><updated>2021-03-09T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/03/09/til-31-be-careful-of-memory-leaks-in-block-of-objective-c</id><content type="html" xml:base="https://jamesu.dev/posts/2021/03/09/til-31-be-careful-of-memory-leaks-in-block-of-objective-c/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt; 내부에서 외부 요소를 접근할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;__weak&lt;/code&gt; 키워드의 지역 변수에 외부 요소를 대입하고 사용하자.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__weak&lt;/code&gt; 키워드를 사용한 변수는 &lt;strong&gt;약한 참조&lt;/strong&gt;이기 때문에 언제든 &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;일 가능성이 있다는 것에 주의하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;block-프로그래밍&quot;&gt;Block 프로그래밍&lt;/h2&gt;

&lt;p&gt;Objective-C는 Swift의 Closure가 등장하기 이전에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;이란 것을 지원했다.
Closure와 유사하게 &lt;strong&gt;로직을 보관할 수 있는 함수 자료형&lt;/strong&gt;이라 생각하면 된다.
그래서 유사한 특징을 가지기도 하는데, 그 중 하나가
&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt; 내부에서 외부의 요소를 접근할 시에 강한 참조를 가진다는 점&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;이는 Closure에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;를 직접 사용함으로써 발생할 수 있는 점하고 유사하다.
Closure에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Capture List&lt;/code&gt;를 사용해서 약한 참조로 캡처해 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;그렇다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;에서는 어떻게 약한 참조로 사용할 수 있을까?&lt;/p&gt;

&lt;h2 id=&quot;메모리-누수-해결&quot;&gt;메모리 누수 해결&lt;/h2&gt;

&lt;p&gt;사내 프로젝트 유지보수 중에 숨겨져 있는 버그 하나를 발견했다.&lt;br /&gt;
정상적으로 메모리 해제가 된다면, 자연스럽게 &lt;code class=&quot;highlighter-rouge&quot;&gt;dealloc&lt;/code&gt; 메소드가 호출되면서 특정 로직이 수행되어야 했는데
그렇지 못해서 비정상적인 동작을 하고 있었다.
이 버그가 특정 상황에서만 발생했기 때문에 더욱 발견하기 어려웠다.&lt;/p&gt;

&lt;p&gt;결론은 특정 비즈니스 로직에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;을 사용하는데, 그 내부에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;를 자연스럽게 접근하고 있는 것이었다.
그로 인해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;에 대한 강한 참조를 가지고, 메모리에 &lt;strong&gt;좀비&lt;/strong&gt;로 남아 있어 메모리 해제가 되지 못한 것이다.&lt;/p&gt;

&lt;p&gt;해결책은 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;을 정의하기 전에 내부에서 사용할 값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;__weak&lt;/code&gt; 키워드로 지역 변수에 보관하고 그것을 사용하는 것&lt;/strong&gt;이다.
예를 들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;를 직접 사용해야 한다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;__weak&lt;/code&gt; 키워드를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;weakSelf&lt;/code&gt;와 같은 변수에 대입해 놓고 &lt;code class=&quot;highlighter-rouge&quot;&gt;weakSelf&lt;/code&gt;를 쓰는 것이다.
물론 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt; 내부에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;weakSelf&lt;/code&gt; 사용 시, &lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;일 수 있다는 것에 주의해야 한다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;을 사용하고 있는 코드를 전부 확인해서 기존에 숨겨져 있던 잠재적 버그까지 모두 수정했다.
더 이상 메모리 누수로 골머리를 앓지 않기 위해서…&lt;/p&gt;

&lt;p&gt;예전에는 Objective-C를 사용할 기회가 많이 없었는데,
여기서는 사내 프로젝트 중 일부가 그 언어로 되어 있어 유지보수를 통해 이런저런 일을 많이 겪을 수 있다.
점점 더 Objective-C와 친해지고 있는 것 같다.&lt;/p&gt;

&lt;p&gt;하지만 나는 Swift와 더 친하게 지낼 것이다. 🙄&lt;/p&gt;

&lt;p&gt;참고로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Block&lt;/code&gt;에 대해 더 알고 싶다면, 이 &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html#//apple_ref/doc/uid/TP40007502&quot; target=&quot;_blank&quot;&gt;링크&lt;/a&gt;를 참고하면 된다.&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="objective-c" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 30: RxSwift 맛보기</title><link href="https://jamesu.dev/posts/2021/03/05/til-30-tasting-rxswift/" rel="alternate" type="text/html" title="TIL 30: RxSwift 맛보기" /><published>2021-03-05T00:00:00+09:00</published><updated>2021-03-05T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/03/05/til-30-tasting-rxswift</id><content type="html" xml:base="https://jamesu.dev/posts/2021/03/05/til-30-tasting-rxswift/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;를 적용하면, 콜백 지옥에서 벗어나 새로운 방식으로 비즈니스 로직을 구현할 수 있다.&lt;/li&gt;
  &lt;li&gt;얼른 맛보자 😋&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reactivex&quot;&gt;ReactiveX&lt;/h2&gt;

&lt;p&gt;Observer 패턴, Iterator 패턴, 함수형 프로그래밍의 집합체로 정의된 &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveX&lt;/code&gt;는
&lt;strong&gt;흐름에 따른 비동기 프로그래밍&lt;/strong&gt; 방식을 지원해주는 유용한 API다.
자세한 설명은 &lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot;&gt;공식 홈페이지&lt;/a&gt;에
문서가 잘 되어 있으니 어떤 느낌인지 알아가는 데 도움이 될 것이다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;흐름&lt;/strong&gt;과 &lt;strong&gt;비동기&lt;/strong&gt;, 그리고 &lt;strong&gt;함수형&lt;/strong&gt;을 이용함으로써, 프로그래밍 방식이 매우 달라진다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;흐름&lt;/code&gt;을 통해 여러 처리를 하나의 흐름으로 합쳐 동기적으로 동작하게 하거나,
다수의 흐름을 병렬적으로 수행하고 하나의 흐름으로 결과를 내거나,
중간에 에러를 발생시켜 흐름을 끊어버리는 등과 같이 다양한 조작으로 원하는 로직을 자연스럽게 처리할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;비동기&lt;/code&gt;를 기반으로 하기 때문에 각 흐름의 입력과 출력에만 집중해 로직을 구현할 수 있다.
항상 처리를 기다릴 필요 없이 흐름의 출력을 바탕으로 원하는 로직으로 조립해 사용하면 된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;함수형&lt;/code&gt; 프로그래밍이 기본이므로, 내부에서 상태를 조작하는 것보다는 입력과 출력에 집중해 비즈니스 로직을 구현할 수 있다.
그로 인해 상태가 꼬이는 실수를 하거나 로직이 복잡해지는 등의 문제를 방지할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이러한 장점을 느껴보고자 &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveX&lt;/code&gt;의 Swift 버전인 &lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;를 공부해서 사내 프로젝트에 일부 도입을 시도해봤고,
성공적으로 적용되어 만족감을 느꼈다.&lt;/p&gt;

&lt;h2 id=&quot;콜백-지옥에서-벗어나자&quot;&gt;콜백 지옥에서 벗어나자&lt;/h2&gt;

&lt;p&gt;일단, &lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;를 네트워크 처리 부분에 먼저 도입했다.&lt;br /&gt;
기존에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Alamofire&lt;/code&gt; 오픈 소스 라이브러리를 사용해 사내 라이브러리에 맞게 커스텀한 부분을
&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;를 이용해 Wrapping하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;Rx&lt;/code&gt; 버전을 추가로 구현했다.&lt;/p&gt;

&lt;p&gt;네트워크 처리를 구현하면서 자주 사용하던 방식은 성공, 실패, 완료 등의 콜백 Closure를 전달한 방식이다.
이는 다수의 네트워크 처리나 로직이 연쇄될 경우 &lt;strong&gt;콜백 지옥&lt;/strong&gt;을 야기할 수 있다.
중괄호 Depth가 계속 생기는 것이다.
콜백 지옥을 느껴보면, 코드의 품질이 낮아보이고 어떻게든 개선하고 싶은 욕구가 생길 것이다.&lt;/p&gt;

&lt;p&gt;이 부분을 &lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;를 적용해 처리해보니,
항상 매개변수로 전달하던 콜백 Closure는 사라지고,
응답 흐름에 대해서 다른 흐름을 추가로 연쇄하거나 응답을 변형하는 등과 같이 원하는 로직을 자연스럽게 처리할 수 있었다.&lt;/p&gt;

&lt;p&gt;그리고 다수의 네트워크 처리를 병렬로 수행해 그 결과에 따른 처리가 편해지고,
&lt;code class=&quot;highlighter-rouge&quot;&gt;DisposeBag&lt;/code&gt;을 활용하니 효율적으로 리소스를 관리할 수 있었다.&lt;/p&gt;

&lt;p&gt;이제 맛보기 단계인데 정말 맛있어서 얼른 다른 부분에도 적용하고 싶은 욕심이 생긴다.&lt;br /&gt;
다른 오픈 소스 라이브러리와의 조합(특히, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;과 연동된 &lt;code class=&quot;highlighter-rouge&quot;&gt;RxCocoa&lt;/code&gt;)도 좋아서 차근차근 도입할 예정이다.
최종적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt; 디자인 패턴을 사내 프로젝트에 적용할 예정이다.&lt;/p&gt;

&lt;p&gt;아직도 재밌는 일이 많이 남아있어 프로그래밍을 놓을 수 없는 것 같다. 👨🏻‍💻&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="swift" /><category term="reactive-x" /><category term="rxswift" /><summary type="html">TL;DR</summary></entry><entry><title type="html">프로그래머스 문제 풀이: 42862 - 체육복</title><link href="https://jamesu.dev/posts/2021/03/03/programmers-problem-solving-42862/" rel="alternate" type="text/html" title="프로그래머스 문제 풀이: 42862 - 체육복" /><published>2021-03-03T00:00:00+09:00</published><updated>2021-03-03T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/03/03/programmers-problem-solving-42862</id><content type="html" xml:base="https://jamesu.dev/posts/2021/03/03/programmers-problem-solving-42862/">&lt;p&gt;&lt;img src=&quot;assets/programmers_42862.png&quot; alt=&quot;42862 - 체육복&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42862&quot; target=&quot;_blank&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;체육복을 도난당한 학생들이 얼마나 많은 체육복을 빌릴 수 있는지를 구해야 한다.&lt;/li&gt;
  &lt;li&gt;체육복은 주변 학생으로부터 빌릴 수 있는 것이 핵심으로 보인다.&lt;/li&gt;
  &lt;li&gt;제한사항에 의한 예외 케이스에 주의한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;체육복을 도난당한 학생들을 기준으로 &lt;strong&gt;차례대로 각 학생이 빌릴 수 있는 경우를 구한다면&lt;/strong&gt;,
최종적으로 최대한 많은 학생이 체육복을 빌릴 수 있게 된다.
이처럼 부분 최적해(각 학생이 빌릴 수 있는 경우)를 구하면,
전체 최적해를 구할 수 있으므로 &lt;a href=&quot;https://en.wikipedia.org/wiki/Greedy_algorithm&quot; target=&quot;_blank&quot;&gt;탐욕(Greedy) 알고리즘&lt;/a&gt;을 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;부분 최적해를 구하기 앞서 제한사항을 보면, 다음과 같은 문구가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 말은 어떤 학생이 도난당한 학생에 속할 수도, 여벌의 체육복을 가진 학생에 속할 수도 있다는 것이다.
따라서 이것을 먼저 필터링해 &lt;strong&gt;체육복을 빌려야만 하는 학생과 여벌의 체육복을 빌려줄 수 있는 학생&lt;/strong&gt;을 다시 구한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;reserve_lost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve_lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve_lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제 체육복을 도난당한 학생들을 정렬을 통해 줄지어 서게 하고 체육복을 빌리게 하면,
앞에서부터 최대한 체육복을 빌리려고 할 것이다.
&lt;strong&gt;빌린 후에는 해당 학생을 도난당한 학생 목록에서 제거하고, 빌려준 학생을 여벌 체육복을 가진 학생 목록에서도 제거해야 한다&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;최종적으로 전체 학생 수 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;에서 체육복을 빌리지 못한 학생 수(도난당한 학생 목록에 남은 학생 수) &lt;code class=&quot;highlighter-rouge&quot;&gt;len(lost)&lt;/code&gt;를 빼면 된다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reserve_lost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intersection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve_lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve_lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;reserve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="programmers" /><category term="greedy-algorithm" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">TIL 29: Xcode의 ‘No Scheme’ 버그 해결</title><link href="https://jamesu.dev/posts/2021/03/02/til-29-how-to-fix-no-scheme-bug-in-xcode/" rel="alternate" type="text/html" title="TIL 29: Xcode의 'No Scheme' 버그 해결" /><published>2021-03-02T00:00:00+09:00</published><updated>2021-03-02T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/03/02/til-29-how-to-fix-no-scheme-bug-in-xcode</id><content type="html" xml:base="https://jamesu.dev/posts/2021/03/02/til-29-how-to-fix-no-scheme-bug-in-xcode/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;프로젝트&amp;gt;.xcodeproj/xcuserdata/&amp;lt;유저&amp;gt;.xcuserdatad&lt;/code&gt;&lt;br /&gt;
또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;프로젝트&amp;gt;.xcodeproj/xcuserdata&lt;/code&gt; 삭제&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xcode의-no-scheme-버그-해결&quot;&gt;Xcode의 ‘No Scheme’ 버그 해결&lt;/h2&gt;

&lt;p&gt;Xcode를 쓰다보면 자잘한 버그가 발견되곤 하는데, 한창 집중하다가 그런 버그가 발생하면 집중력이 흩트러진다.
이번에도 엄청 집중하며 개발을 하고 있었는데, &lt;strong&gt;‘No Scheme’ 버그&lt;/strong&gt;가 발생해 빌드조차 못하는 상황이 되버렸다.&lt;/p&gt;

&lt;p&gt;잘 사용하던 Scheme이 갑자기 모두 사라지며, ‘No Scheme’이라 표시되는데 해결책은 매우 간단했다.
&lt;strong&gt;프로젝트 파일 내부의 유저 데이터 관련 디렉터리를 지워 초기화&lt;/strong&gt;하는 것이다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;프로젝트&amp;gt;.xcodeproj/xcuserdata/&amp;lt;유저&amp;gt;.xcuserdatad&lt;/code&gt;&lt;br /&gt;
또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;프로젝트&amp;gt;.xcodeproj/xcuserdata&lt;/code&gt; 삭제&lt;/li&gt;
  &lt;li&gt;Xcode 재실행&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Xcode 재실행 시, Scheme이 다시 설정되므로 기존과 같이 사용할 수 있다.&lt;br /&gt;
물론, 유저 데이터 중 필요한 파일이 있다면 잘 백업해서 복구하는 절차가 필요하다.&lt;/p&gt;

&lt;p&gt;이렇게 Xcode의 자잘한 버그 중 하나로부터 탈출! 😎&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="xcode" /><summary type="html">TL;DR</summary></entry><entry><title type="html">프로그래머스 문제 풀이: 42840 - 모의고사</title><link href="https://jamesu.dev/posts/2021/02/25/programmers-problem-solving-42840/" rel="alternate" type="text/html" title="프로그래머스 문제 풀이: 42840 - 모의고사" /><published>2021-02-25T00:00:00+09:00</published><updated>2021-02-25T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/25/programmers-problem-solving-42840</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/25/programmers-problem-solving-42840/">&lt;p&gt;&lt;img src=&quot;assets/programmers_42840.png&quot; alt=&quot;42840 - 모의고사&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42840&quot; target=&quot;_blank&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3명의 수포자가 답을 찍는 패턴을 이용하는 것이 핵심이다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;각 수포자의 답을 찍는 패턴을 일반화 하는 것이 까다로우므로, 반복되는 부분을 패턴으로 취급하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1번 수포자: 1, 2, 3, 4, 5, …&lt;/li&gt;
  &lt;li&gt;2번 수포자: 2, 1, 2, 3, 2, 4, 2, 5, …&lt;/li&gt;
  &lt;li&gt;3번 수포자: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 패턴을 바탕으로 정답 배열을 순회하며 정답 여부를 모아 점수를 계산할 수 있다.&lt;/p&gt;

&lt;p&gt;이때, 패턴을 원형 큐와 같이 이용하고자 &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; 연산을 통해 패턴 값에 접근해야 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;marks&lt;/code&gt;를 수포자 3명의 패턴 배열 목록이라 하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;를 수포자 인덱스라 했을 때,
&lt;code class=&quot;highlighter-rouge&quot;&gt;marks[j][i % len(marks[j])]&lt;/code&gt;와 같이 원형 큐처럼 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;마지막으로 가장 높은 점수를 받은 수포자만 걸러 정렬한 뒤 반환해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="programmers" /><category term="brute-force" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">프로그래머스 문제 풀이: 42748 - K번째수</title><link href="https://jamesu.dev/posts/2021/02/24/programmers-problem-solving-42748/" rel="alternate" type="text/html" title="프로그래머스 문제 풀이: 42748 - K번째수" /><published>2021-02-24T00:00:00+09:00</published><updated>2021-02-24T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/24/programmers-problem-solving-42748</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/24/programmers-problem-solving-42748/">&lt;p&gt;&lt;img src=&quot;assets/programmers_42748.png&quot; alt=&quot;42748 - K번째수&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42748&quot; target=&quot;_blank&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;주어진 단계별 로직을 적용해 변환을 하면 된다.&lt;br /&gt;
별도로 예외 처리에 대한 언급이 없으니 정상적인 입력만 들어온다고 생각할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;commands&lt;/code&gt; 배열을 순회하며, 각 명령(&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;)에 대해 다음과 같이 단계별 로직을 적용해 변환할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd[0]&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;이고 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd[1]&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;이므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;array[cmd[0] - 1:cmd[1]]&lt;/code&gt;를 통해 배열을 자른다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sorted&lt;/code&gt; 함수를 통해 배열을 오름차순으로 정렬한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd[2]&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;이므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;[cmd[2] - 1]&lt;/code&gt;와 같이 배열의 요소를 꺼낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;최종적으로 꺼낸 요소를 모아 배열화 해서 반환하도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="programmers" /><category term="sort" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">프로그래머스 문제 풀이: 72410 - 신규 아이디 추천</title><link href="https://jamesu.dev/posts/2021/02/22/programmers-problem-solving-72410/" rel="alternate" type="text/html" title="프로그래머스 문제 풀이: 72410 - 신규 아이디 추천" /><published>2021-02-22T00:00:00+09:00</published><updated>2021-02-22T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/22/programmers-problem-solving-72410</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/22/programmers-problem-solving-72410/">&lt;p&gt;&lt;img src=&quot;assets/programmers_72410.png&quot; alt=&quot;72410 - 신규 아이디 추천&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/72410&quot; target=&quot;_blank&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;주어진 조건에 따라 단계별로 변환 과정을 거치면 된다.&lt;br /&gt;
조건의 구체적인 사항을 놓치지 않도록 주의한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;문제에서 단순히 변환 조건만 명시하지 않고, 친절하게 단계별로 어떻게 변환하는 지를 알려주고 있으므로
차례대로 따라 가면서 변환을 거치면 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;단계별 변환 조건을 보면 몇몇 단계에서는 까다로워 보일 수 있는 조건들이 있는데,
이는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D&quot; target=&quot;_blank&quot;&gt;정규 표현식(정규식, Regular Expression, regex)&lt;/a&gt;을 이용하면 쉽게 해결할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2단계: &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 문자를 이용해 반대 조건에 해당하는 문자를 빈 문자열로 치환한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.sub(r'[^a-z0-9-_.]', '', new_id)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3단계: &lt;code class=&quot;highlighter-rouge&quot;&gt;{2,}&lt;/code&gt;를 이용해 2번 이상 반복되는 것을 찾아내어 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 문자로 치환한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.sub(r'[.]{2,}', '.', new_id)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4단계: &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 문자로 처음 위치를, &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 문자로 끝 위치의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 문자를 찾아내어 빈 문자열로 치환한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.sub(r'^[.]|[.]$', '', new_id)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;6단계: &lt;code class=&quot;highlighter-rouge&quot;&gt;[:15]&lt;/code&gt;를 이용해 16자 미만의 문자만 추출해내고, &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 문자로 끝 위치의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 문자를 찾아내어 빈 문자열로 치환한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.sub(r'[.]$', '', new_id[:15])&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 하면, 정규식을 이용해 간단히 변환을 할 수 있다.&lt;/p&gt;

&lt;p&gt;추가적으로 5단계에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_id&lt;/code&gt;가 빈 문자열이라면, 6단계를 무시하고 7단계로 넘어가도 되므로 분기를 해도 된다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[^a-z0-9-_.]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[.]{2,}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^[.]|[.]$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[.]$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'aaa'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="programmers" /><category term="regex" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">TIL 28: PDFView의 페이지 커스텀하기</title><link href="https://jamesu.dev/posts/2021/02/19/til-28-customizing-page-of-PDFView/" rel="alternate" type="text/html" title="TIL 28: PDFView의 페이지 커스텀하기" /><published>2021-02-19T00:00:00+09:00</published><updated>2021-02-19T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/19/til-28-customizing-page-of-PDFView</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/19/til-28-customizing-page-of-PDFView/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;의 페이지를 커스텀하려면, &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt; Notification을 이용하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pdfview-환경설정의-한계&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt; 환경설정의 한계&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;를 사용하면, &lt;strong&gt;PDF 뷰어&lt;/strong&gt;를 손쉽게 만들 수 있다.&lt;br /&gt;
웬만한 요구사항은 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;에서 제공하는 환경설정으로 충분히 깔끔하고 편한 PDF 뷰어를 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;하지만, 현실은 항상 그렇게 녹록지 않다.&lt;br /&gt;
디자이너의 요구사항에 따라 &lt;strong&gt;PDF 뷰어의 각 PDF 페이지 상하단에 배경과 구분할 수 있는 구분선을 넣어달라는 것&lt;/strong&gt;이었다.
디자인 요구사항 자체가 그렇게 어려운 것은 아니라 쉽게 해결될 것 같았지만,
&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;에서 단순하게 제공하는 것만으로는 각 페이지에 구분선을 넣을 수 없었다.&lt;/p&gt;

&lt;p&gt;그래서 하루 동안 많은 삽질을 했고, 결국엔 해냈다.&lt;br /&gt;
생각보다 많은 시간(하루 초과)이 들지 않아 다행이었다.&lt;/p&gt;

&lt;h2 id=&quot;pdfview의-페이지-커스텀하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;의 페이지 커스텀하기&lt;/h2&gt;

&lt;p&gt;구글링도 해보고 &lt;a href=&quot;https://developer.apple.com/documentation/pdfkit/pdfview&quot; target=&quot;_blank&quot;&gt;공식 문서&lt;/a&gt;의
이것 저것을 파헤치다가 Notification 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt;가 눈에 들어왔다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt;는 말그대로 현재 페이지가 변할 때마다 송신하는 Notification인데,
해당 타이밍 때마다 페이지 뷰에 조작을 가하는 것이 가장 적절한 타이밍이라 생각했다.&lt;/p&gt;

&lt;p&gt;또한, 해당 Notification을 이용해 페이지 뷰의 메모리를 확인하면서
페이지 뷰를 새로 생성하거나 재활용하면서 PDF를 보여준다는 것을 파악했다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt; Notification이 수신될 때마다 페이지 뷰를 찾아내 구분선을 추가하도록 다음과 같이 처리했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PDFViewPageChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scrollView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PDFPageView&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdfPageView&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;borderView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CubeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;border&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pdfPageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeConstraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalToSuperview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CubeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;border&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pdfPageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeConstraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalToSuperview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;커스텀 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;를 생성할 때, 위와 같은 동작을 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt; Notification에 등록해주면 된다.
페이지 뷰가 깊숙한 자식으로 들어가 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFPageView&lt;/code&gt; 클래스에 접근하지 못하게 되어 있어 &lt;strong&gt;클래스 이름을 이용해 필터링&lt;/strong&gt; 했다.
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter { $0.subviews.isEmpty }&lt;/code&gt; 처리를 통해 &lt;strong&gt;구분선이 존재하지 않는 경우에만 구분선을 추가&lt;/strong&gt;하도록 했다.
그래서 불필요하거나 과하지 않게 적절한 타이밍에 구분선을 페이지에 추가할 수 있었다.&lt;/p&gt;

&lt;p&gt;시간이 지날수록 코드로 커스터마이징하는 실력이 늘어나는 것이 체감되어 기쁘다. 😎&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="ui" /><summary type="html">TL;DR</summary></entry></feed>