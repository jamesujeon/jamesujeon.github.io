<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://jamesu.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jamesu.dev/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2021-03-01T22:15:30+09:00</updated><id>https://jamesu.dev/</id><title type="html">Jamesu Devlog</title><subtitle>Dev Blog by James Minsu Jeon</subtitle><author><name>jamesujeon</name><email>jamesujeon@gmail.com</email></author><entry><title type="html">프로그래머스 문제 풀이: 42840 - 모의고사</title><link href="https://jamesu.dev/posts/2021/02/25/programmers-problem-solving-42840/" rel="alternate" type="text/html" title="프로그래머스 문제 풀이: 42840 - 모의고사" /><published>2021-02-25T00:00:00+09:00</published><updated>2021-02-25T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/25/programmers-problem-solving-42840</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/25/programmers-problem-solving-42840/">&lt;p&gt;&lt;img src=&quot;assets/programmers_42840.png&quot; alt=&quot;42840 - 모의고사&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42840&quot; target=&quot;_blank&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3명의 수포자가 답을 찍는 패턴을 이용하는 것이 핵심이다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;각 수포자의 답을 찍는 패턴을 일반화 하는 것이 까다로우므로, 반복되는 부분을 패턴으로 취급하면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1번 수포자: 1, 2, 3, 4, 5, …&lt;/li&gt;
  &lt;li&gt;2번 수포자: 2, 1, 2, 3, 2, 4, 2, 5, …&lt;/li&gt;
  &lt;li&gt;3번 수포자: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 패턴을 바탕으로 정답 배열을 순회하며 정답 여부를 모아 점수를 계산할 수 있다.&lt;/p&gt;

&lt;p&gt;이때, 패턴을 원형 큐와 같이 이용하고자 &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt; 연산을 통해 패턴 값에 접근해야 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;marks&lt;/code&gt;를 수포자 3명의 패턴 배열 목록이라 하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;를 수포자 인덱스라 했을 때,
&lt;code class=&quot;highlighter-rouge&quot;&gt;marks[j][i % len(marks[j])]&lt;/code&gt;와 같이 원형 큐처럼 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;마지막으로 가장 높은 점수를 받은 수포자만 걸러 정렬한 뒤 반환해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max_score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="programmers" /><category term="brute-force" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">프로그래머스 문제 풀이: 42748 - K번째수</title><link href="https://jamesu.dev/posts/2021/02/24/programmers-problem-solving-42748/" rel="alternate" type="text/html" title="프로그래머스 문제 풀이: 42748 - K번째수" /><published>2021-02-24T00:00:00+09:00</published><updated>2021-02-24T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/24/programmers-problem-solving-42748</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/24/programmers-problem-solving-42748/">&lt;p&gt;&lt;img src=&quot;assets/programmers_42748.png&quot; alt=&quot;42748 - K번째수&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/42748&quot; target=&quot;_blank&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;주어진 단계별 로직을 적용해 변환을 하면 된다.&lt;br /&gt;
별도로 예외 처리에 대한 언급이 없으니 정상적인 입력만 들어온다고 생각할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;commands&lt;/code&gt; 배열을 순회하며, 각 명령(&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;)에 대해 다음과 같이 단계별 로직을 적용해 변환할 수 있다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd[0]&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;이고 &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd[1]&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;이므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;array[cmd[0] - 1:cmd[1]]&lt;/code&gt;를 통해 배열을 자른다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sorted&lt;/code&gt; 함수를 통해 배열을 오름차순으로 정렬한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd[2]&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;이므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;[cmd[2] - 1]&lt;/code&gt;와 같이 배열의 요소를 꺼낸다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;최종적으로 꺼낸 요소를 모아 배열화 해서 반환하도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="programmers" /><category term="sort" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">프로그래머스 문제 풀이: 72410 - 신규 아이디 추천</title><link href="https://jamesu.dev/posts/2021/02/22/programmers-problem-solving-72410/" rel="alternate" type="text/html" title="프로그래머스 문제 풀이: 72410 - 신규 아이디 추천" /><published>2021-02-22T00:00:00+09:00</published><updated>2021-02-22T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/22/programmers-problem-solving-72410</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/22/programmers-problem-solving-72410/">&lt;p&gt;&lt;img src=&quot;assets/programmers_72410.png&quot; alt=&quot;72410 - 신규 아이디 추천&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://programmers.co.kr/learn/courses/30/lessons/72410&quot; target=&quot;_blank&quot;&gt;문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;주어진 조건에 따라 단계별로 변환 과정을 거치면 된다.&lt;br /&gt;
조건의 구체적인 사항을 놓치지 않도록 주의한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;문제에서 단순히 변환 조건만 명시하지 않고, 친절하게 단계별로 어떻게 변환하는 지를 알려주고 있으므로
차례대로 따라 가면서 변환을 거치면 해결할 수 있다.&lt;/p&gt;

&lt;p&gt;단계별 변환 조건을 보면 몇몇 단계에서는 까다로워 보일 수 있는 조건들이 있는데,
이는 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%A0%95%EA%B7%9C_%ED%91%9C%ED%98%84%EC%8B%9D&quot; target=&quot;_blank&quot;&gt;정규 표현식(정규식, Regular Expression, regex)&lt;/a&gt;을 이용하면 쉽게 해결할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2단계: &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 문자를 이용해 반대 조건에 해당하는 문자를 빈 문자열로 치환한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.sub(r'[^a-z0-9-_.]', '', new_id)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;3단계: &lt;code class=&quot;highlighter-rouge&quot;&gt;{2,}&lt;/code&gt;를 이용해 2번 이상 반복되는 것을 찾아내어 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 문자로 치환한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.sub(r'[.]{2,}', '.', new_id)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;4단계: &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; 문자로 처음 위치를, &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 문자로 끝 위치의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 문자를 찾아내어 빈 문자열로 치환한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.sub(r'^[.]|[.]$', '', new_id)&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;6단계: &lt;code class=&quot;highlighter-rouge&quot;&gt;[:15]&lt;/code&gt;를 이용해 16자 미만의 문자만 추출해내고, &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; 문자로 끝 위치의 &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt; 문자를 찾아내어 빈 문자열로 치환한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;re.sub(r'[.]$', '', new_id[:15])&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이렇게 하면, 정규식을 이용해 간단히 변환을 할 수 있다.&lt;/p&gt;

&lt;p&gt;추가적으로 5단계에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;new_id&lt;/code&gt;가 빈 문자열이라면, 6단계를 무시하고 7단계로 넘어가도 되므로 분기를 해도 된다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;re&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lower&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[^a-z0-9-_.]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[.]{2,}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'^[.]|[.]$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;r'[.]$'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ljust&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'aaa'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_id&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="programmers" /><category term="regex" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">TIL 28: PDFView의 페이지 커스텀하기</title><link href="https://jamesu.dev/posts/2021/02/19/til-28-customizing-page-of-PDFView/" rel="alternate" type="text/html" title="TIL 28: PDFView의 페이지 커스텀하기" /><published>2021-02-19T00:00:00+09:00</published><updated>2021-02-19T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/19/til-28-customizing-page-of-PDFView</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/19/til-28-customizing-page-of-PDFView/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;의 페이지를 커스텀하려면, &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt; Notification을 이용하는 것이 좋다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pdfview-환경설정의-한계&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt; 환경설정의 한계&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;를 사용하면, &lt;strong&gt;PDF 뷰어&lt;/strong&gt;를 손쉽게 만들 수 있다.&lt;br /&gt;
웬만한 요구사항은 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;에서 제공하는 환경설정으로 충분히 깔끔하고 편한 PDF 뷰어를 구현할 수 있다.&lt;/p&gt;

&lt;p&gt;하지만, 현실은 항상 그렇게 녹록지 않다.&lt;br /&gt;
디자이너의 요구사항에 따라 &lt;strong&gt;PDF 뷰어의 각 PDF 페이지 상하단에 배경과 구분할 수 있는 구분선을 넣어달라는 것&lt;/strong&gt;이었다.
디자인 요구사항 자체가 그렇게 어려운 것은 아니라 쉽게 해결될 것 같았지만,
&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;에서 단순하게 제공하는 것만으로는 각 페이지에 구분선을 넣을 수 없었다.&lt;/p&gt;

&lt;p&gt;그래서 하루 동안 많은 삽질을 했고, 결국엔 해냈다.&lt;br /&gt;
생각보다 많은 시간(하루 초과)이 들지 않아 다행이었다.&lt;/p&gt;

&lt;h2 id=&quot;pdfview의-페이지-커스텀하기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;의 페이지 커스텀하기&lt;/h2&gt;

&lt;p&gt;구글링도 해보고 &lt;a href=&quot;https://developer.apple.com/documentation/pdfkit/pdfview&quot; target=&quot;_blank&quot;&gt;공식 문서&lt;/a&gt;의
이것 저것을 파헤치다가 Notification 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt;가 눈에 들어왔다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt;는 말그대로 현재 페이지가 변할 때마다 송신하는 Notification인데,
해당 타이밍 때마다 페이지 뷰에 조작을 가하는 것이 가장 적절한 타이밍이라 생각했다.&lt;/p&gt;

&lt;p&gt;또한, 해당 Notification을 이용해 페이지 뷰의 메모리를 확인하면서
페이지 뷰를 새로 생성하거나 재활용하면서 PDF를 보여준다는 것을 파악했다.&lt;/p&gt;

&lt;p&gt;그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt; Notification이 수신될 때마다 페이지 뷰를 찾아내 구분선을 추가하도록 다음과 같이 처리했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Notification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;PDFViewPageChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scrollView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;scrollView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;PDFPageView&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pdfPageView&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;borderView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CubeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;border&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pdfPageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeConstraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalToSuperview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CubeColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;border&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pdfPageView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addSubview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;borderView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;makeConstraints&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalToSuperview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equalTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;커스텀 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFView&lt;/code&gt;를 생성할 때, 위와 같은 동작을 &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFViewPageChanged&lt;/code&gt; Notification에 등록해주면 된다.
페이지 뷰가 깊숙한 자식으로 들어가 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;PDFPageView&lt;/code&gt; 클래스에 접근하지 못하게 되어 있어 &lt;strong&gt;클래스 이름을 이용해 필터링&lt;/strong&gt; 했다.
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;filter { $0.subviews.isEmpty }&lt;/code&gt; 처리를 통해 &lt;strong&gt;구분선이 존재하지 않는 경우에만 구분선을 추가&lt;/strong&gt;하도록 했다.
그래서 불필요하거나 과하지 않게 적절한 타이밍에 구분선을 페이지에 추가할 수 있었다.&lt;/p&gt;

&lt;p&gt;시간이 지날수록 코드로 커스터마이징하는 실력이 늘어나는 것이 체감되어 기쁘다. 😎&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="ui" /><summary type="html">TL;DR</summary></entry><entry><title type="html">GitHub 커밋 그래프(GitHub Contributions Graph) 보여주기</title><link href="https://jamesu.dev/posts/2021/02/09/showing-github-contributions-graph/" rel="alternate" type="text/html" title="GitHub 커밋 그래프(GitHub Contributions Graph) 보여주기" /><published>2021-02-09T00:00:00+09:00</published><updated>2021-02-09T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/09/showing-github-contributions-graph</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/09/showing-github-contributions-graph/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;https://ghchart.rshah.org/jamesujeon&quot;/&amp;gt;&lt;/code&gt; 한줄로 나의 &lt;strong&gt;잔디&lt;/strong&gt;를 표현할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;https://ghchart.rshah.org/219138/jamesujeon&quot;/&amp;gt;&lt;/code&gt;와 같이 &lt;strong&gt;기준 색&lt;/strong&gt;을 지정할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;github-contributions-graph&quot;&gt;GitHub Contributions Graph&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub를 사용하는 사람이라면 누구나 한번쯤 위와 같은 &lt;strong&gt;GitHub Contributions Graph&lt;/strong&gt;를 본 적이 있을 것이다.
그리고 많은 개발자가 이 초록색 네모(일명 잔디)를 채우기 위해 하루하루 코딩을 한다.
이렇게 채운 네모는 코딩을 더 열심히 하게 자극을 주는 동기부여가 된다.&lt;/p&gt;

&lt;p&gt;GitHub Contributions Graph를 많이 채웠으면 그것을 누군가에게 자랑을 하고 싶기도 하고,
스스로 보며 뿌듯함을 느끼고 싶기도 할 것이다.
그러기 위해 블로그에 그 그래프를 연동하기도 하는데, 최근에 괜찮은 오픈 소스를 발견해 그것을 이용해
&lt;a href=&quot;https://jamesu.dev/about&quot; target=&quot;_blank&quot;&gt;About&lt;/a&gt; 페이지를 꾸몄다.&lt;/p&gt;

&lt;h2 id=&quot;github-chart-api-연동&quot;&gt;Github Chart API 연동&lt;/h2&gt;

&lt;p&gt;그래프를 보여주기 위해 사용한 오픈 소스는 &lt;a href=&quot;https://github.com/akerl/githubchart&quot; target=&quot;_blank&quot;&gt;Github Chart API&lt;/a&gt;라
불리는 &lt;strong&gt;그래프 이미지 생성 API&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;Github Chart API는 GitHub 계정으로부터 Contributions 데이터를 불러와 이미지 파일을 생성하고 호스팅을 통해 이미지 파일을 제공해준다.
이미지 파일은 SVG이기 때문에 화면 크기에 맞춰 적절하게 보여질 수 있으며, 원하는 기준 색을 지정해 네모(일명 잔디)의 색을 바꿀 수 있다.&lt;/p&gt;

&lt;p&gt;사용법은 정말 간단하다.&lt;br /&gt;
다음 코드와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; 요소의 이미지 파일 경로로
&lt;strong&gt;호스팅 사이트(https://ghchart.rshah.org) 뒤에 GitHub 계정명을 덧붙인 경로&lt;/strong&gt;를 전달하면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ghchart.rshah.org/jamesujeon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;앞서 얘기한 것처럼 &lt;strong&gt;기준 색&lt;/strong&gt;을 지정하고 싶다면,
다음 코드와 같이 &lt;strong&gt;GitHub 계정명 앞에 16진수 색상 코드&lt;/strong&gt;를 덧붙이면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ghchart.rshah.org/219138/jamesujeon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 코드를 적용한 &lt;a href=&quot;https://jamesu.dev/about&quot; target=&quot;_blank&quot;&gt;About&lt;/a&gt; 페이지의 이미지는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_2.png&quot; alt=&quot;Figure 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 이미지는 현재의 GitHub 데이터를 기준으로 하기 때문에 최신 이미지가 유지될 수 있다.
물론, 이미지 파일이 캐싱되어 이전 상태의 이미지가 보일 수 있으니 그런 경우 캐시를 제거하고 확인해 봐야 한다.&lt;/p&gt;

&lt;p&gt;Github Chart API에서 생성하는 이미지 파일은 &lt;a href=&quot;https://github.com/akerl/githubchart&quot; target=&quot;_blank&quot;&gt;GithubChart&lt;/a&gt;라 하는
다른 오픈 소스로부터 생성된 것이다.
만약, 이미지 파일을 생성하는 로직이 궁금하거나 해당 루비 라이브러리를 직접 연동하고 싶은 경우, GithubChart를 참고하면 도움이 될 것이다.&lt;/p&gt;

&lt;p&gt;얼른 한줄의 코드를 통해 자신의 GitHub Contributions Graph를 뽐내도록 하자! 😎&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="github" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 27: Closure에서의 메모리 누수 제거하기</title><link href="https://jamesu.dev/posts/2021/02/05/til-27-removing-memory-leaks-in-closure/" rel="alternate" type="text/html" title="TIL 27: Closure에서의 메모리 누수 제거하기" /><published>2021-02-05T00:00:00+09:00</published><updated>2021-02-05T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/02/05/til-27-removing-memory-leaks-in-closure</id><content type="html" xml:base="https://jamesu.dev/posts/2021/02/05/til-27-removing-memory-leaks-in-closure/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Retain Cycle이 아닌 &lt;strong&gt;불필요한 메모리 점유&lt;/strong&gt;도 일종의 메모리 누수라고 생각한다.&lt;/li&gt;
  &lt;li&gt;Closure에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; 캡처를 할 때는 타이밍에 주의하자.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;기본기&lt;/strong&gt;는 항상 중요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;숨겨져-있는-메모리-누수&quot;&gt;숨겨져 있는 메모리 누수&lt;/h2&gt;

&lt;p&gt;Xcode는 현재 화면에서의 메모리 누수를 확인할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug Memory Graph&lt;/code&gt; 기능을 제공한다.
이를 통해 메모리에 할당된 데이터 간의 그래프를 볼 수 있고, 그 관계를 통해 누가 누구와 연결되었는지 알 수 있다.
그리고 Retain Cycle이 발생한 경우, 바로 표시해주어 한눈에 그것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;하지만, Retain Cycle 표시가 없다고 안심할 수 있는 것은 아니다.&lt;br /&gt;
실제 메모리가 할당된 목록을 보면, 현재 화면에서 존재하면 안 되는 데이터가 남아있는 것이 확인될 수도 있다.
논리적으로 해당 데이터가 남아 있으면 안 되지만 목록에 나타난다면,
&lt;strong&gt;그것은 Retain Cycle은 아니지만 앱이 실행되는 내내 메모리를 점유하고 있기에 불필요한 메모리 점유로 간주한다&lt;/strong&gt;.
그래서 나는 이것도 또 하나의 메모리 누수라고 생각한다.&lt;/p&gt;

&lt;h2 id=&quot;closure-사용할-때-주의하기&quot;&gt;Closure 사용할 때 주의하기&lt;/h2&gt;

&lt;p&gt;사내 프로젝트에서도 그 숨겨진 메모리 누수가 발견되었는데, 원인을 찾기 매우 어려웠다.
그래도 Xcode의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Debug Memory Graph&lt;/code&gt; 기능을 통해 연결 관계를 추적하다보니 Closure를 사용하는 부분이 의심이 됐다.
그리고 몇가지 실험을 통해 Closure에서 객체를 붙잡고 있어 메모리 누수가 발생한 것을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;개인적으로 Swift에서 Closure를 사용할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;의 프로퍼티나 메소드를 사용하는 경우, 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; 캡처를 하는 습관이 몸에 배어 있다.
그래서 별 탈이 없이 사용한 줄 알았는데 함정이 있었다.&lt;/p&gt;

&lt;p&gt;기존 코드는 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak self&lt;/code&gt; 캡처를 했었다.&lt;br /&gt;
(개인적으로 사용한 코드이기 때문에 Closure 부분만 집중하면 된다.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asyncAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;refreshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;하지만, 나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Capture List&lt;/code&gt;라는 개념에 대해 대략적으로만 알고 사용했었고, 그 결과 메모리 누수로 이어졌던 것이다.
저렇게 캡처를 하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;addAction&lt;/code&gt; 메소드를 호출해 Closure를 정의하는 시점에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; 캡처되지 않고,
그 안의 &lt;code class=&quot;highlighter-rouge&quot;&gt;asyncAfter&lt;/code&gt; 메소드를 호출할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak self&lt;/code&gt; 캡처를 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;가 사용되기 때문에 결국에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt; 캡처가 된 것이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Capture List&lt;/code&gt;는 Closure를 &lt;strong&gt;정의하는 시점에 캡처&lt;/strong&gt;를 하는 것이기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt; 캡처를 하고 싶다면, 정의 시점에 캡처를 해야 한다.
따라서, 다음과 같이 수정을 하면 Closure에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt;를 붙잡는 현상이 사라진다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;asyncAfter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deadline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;refreshData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;정말 간단한 해결책이지만, Swift 언어에 대한 기본기가 부족해 발생했던 문제점이었다.&lt;/p&gt;

&lt;p&gt;이렇게 고생을 했으니 앞으로는 까먹지 않고 숨겨진 메모리 누수를 막을 수 있을 것 같다.&lt;br /&gt;
다시 한번 느끼지만, &lt;strong&gt;기본기&lt;/strong&gt;는 항상 중요하다. 🤔&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="swift" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 26: Xcode 파일 Header Comment 통일</title><link href="https://jamesu.dev/posts/2021/01/28/til-26-making-xcode-file-header-comment-consistent/" rel="alternate" type="text/html" title="TIL 26: Xcode 파일 Header Comment 통일" /><published>2021-01-28T00:00:00+09:00</published><updated>2021-01-28T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/28/til-26-making-xcode-file-header-comment-consistent</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/28/til-26-making-xcode-file-header-comment-consistent/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Xcode는 파일 Header Comment 포맷을 정의하는 방법을 제공한다.&lt;/li&gt;
  &lt;li&gt;파일 Header Comment 포맷을 통일해 프로젝트의 일관성을 유지하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;파일-header-comment의-일관성을-유지하자&quot;&gt;파일 Header Comment의 일관성을 유지하자&lt;/h2&gt;

&lt;p&gt;언제나 Naming을 열심히 고민하는 개발자들에게 &lt;strong&gt;일관성&lt;/strong&gt; 유지는 중요한 마음가짐이자 규칙이다.&lt;br /&gt;
파일을 생성할 때마다 상단에 추가되는 Header Comment도 그것의 예외가 될 수 없다.&lt;/p&gt;

&lt;p&gt;기본적으로 Xcode에서 제공하는 파일 Header Comment 포맷에는 파일명, 프로젝트명, Copyright, 작성자 등이 포함된다.
일반적으로 저것으로 충분할 것으로 보이지만, 사내에서 여러 개발자가 파일을 생성하다보면 일관성이 깨지는 상황이 발생할 수 있다.
그것은 특히 작성자의 아이디가 알 수 없는 이름으로 되어 있거나 파일명을 수시로 바꾸는 경우다.&lt;/p&gt;

&lt;p&gt;개발 환경을 설정할 때 임의의 애플 아이디로 로그인 해서 개발을 시작하거나 사내에서 쓰지 않는 자신만의 아이디를 쓰는 등과 같이
직접 확인하지 않으면 일관성이 깨지고 중구난방이 될 수 있다.
또한, 파일명이 이상해 리팩토링을 통해 고치거나 하면, Header Comment도 같이 바꾸는 게 정석이지만 빼먹고 변경하지 않는 일이 허다하다.
후자의 경우는 코드 리뷰나 개발자 스스로가 신경써서 관리해야 하겠지만, 전자의 경우는 사내 파일 Header Comment 규칙을 바꾸는 것도 한 방법이 될 수 있다.&lt;/p&gt;

&lt;p&gt;협업을 하다 보면 하나의 파일을 여러 개발자가 건드리는 경우가 많으므로, 굳이 작성자를 명시할 필요가 없다.
또한, 커밋 내역을 통해 누가 무엇을 어떻게 수정했는지 파악할 수 있다.
따라서 작성자를 파일 Header Comment에 포함시킬 필요가 없었고, 일관성을 유지하기 좋은 방향으로 포맷을 수정할 필요가 생겼다.&lt;/p&gt;

&lt;p&gt;다행히 Xcode에 파일 Header Comment 포맷을 변경할 수 있는 방법이 다양하게 존재했고,
사내 프로젝트를 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;xcshareddata&lt;/code&gt;에 보관하는 방식으로 다른 개발자에게도 동일한 규칙을 적용시킬 수 있었다.
&lt;a href=&quot;https://help.apple.com/xcode/mac/9.0/index.html?localePath=en.lproj#/dev7fe737ce0&quot; target=&quot;_blank&quot;&gt;이 곳&lt;/a&gt;에서
포맷에 적용할 수 있는 다양한 매크로를 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;어찌보면 사소한 일이지만, 이 사소한 일이 다양한 인적 실수를 방지하고, 퀄리티를 높이는 등 좋은 장점이 있다고 생각한다.
얼른 다른 프로젝트에도 적용해야겠다. 😎&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="xcode" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 25: HTML 태그가 포함된 텍스트 변환하기</title><link href="https://jamesu.dev/posts/2021/01/22/til-25-converting-text-including-html-tags/" rel="alternate" type="text/html" title="TIL 25: HTML 태그가 포함된 텍스트 변환하기" /><published>2021-01-22T00:00:00+09:00</published><updated>2021-01-22T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/22/til-25-converting-text-including-html-tags</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/22/til-25-converting-text-including-html-tags/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;HTML 태그가 포함된 텍스트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSAttributedString&lt;/code&gt; 클래스를 이용해 일반 텍스트로 변환할 수 있다.&lt;/li&gt;
  &lt;li&gt;텍스트 변환 후에는 적용되었던 텍스트 스타일이 초기화되므로 재설정 해줘야 한다.&lt;/li&gt;
  &lt;li&gt;요구사항에 따라 깔끔하게 텍스트 스타일을 유지하며 변환하는 것이 힘들 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;불편한-ios의-html-텍스트-변환&quot;&gt;불편한 iOS의 HTML 텍스트 변환&lt;/h2&gt;

&lt;p&gt;이번에 사내 앱 프로젝트에서 HTML 태그가 포함된 텍스트를 변환해 텍스트 스타일을 적용하는 요구사항이 생겼다.
그래서 바로 리서치를 해보니, 안드로이드에서 간단히 &lt;code class=&quot;highlighter-rouge&quot;&gt;Html&lt;/code&gt; 클래스를 이용하는 것처럼,
iOS에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSAttributedString&lt;/code&gt; 클래스를 이용해 간단히 처리할 수 있나 했더니 오산이었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSAttributedString&lt;/code&gt; 클래스를 이용해 변환하면, 기존에 적용되었던 폰트 등의 &lt;strong&gt;텍스트 스타일이 모두 초기화&lt;/strong&gt;되는 것이었다.
요구사항에서 언급된 HTML 태그로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;b&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;i&amp;gt;&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;u&amp;gt;&lt;/code&gt; 등과 같은 볼드, 이탤릭, 밑줄 처리를 하는 텍스트 스타일이었다.
그래서 텍스트 변환 후에 일일이 각 텍스트 스타일이 적용된 부분을 찾아 폰트를 변경하는 처리를 해야 했는데,
생각만큼 쉽게 모든 스타일이 적용되지 않았다.&lt;/p&gt;

&lt;p&gt;또 다른 방법으로는 &lt;strong&gt;기존 HTML 태그가 포함된 텍스트를 원하는 폰트, 글자 색깔, 글자 크기 등의 값을 설정할 수 있는 태그로 감싸고, 그것을 변환&lt;/strong&gt;하는 것이었다.
만약, 각 텍스트 스타일마다 폰트를 다르게 적용하는 처리가 필요하다면 더 복잡할 수 있다.
다행히 현재 프로젝트에서는 애플 시스템 폰트를 기본으로 사용하고 있기 때문에 문제가 없었다.&lt;/p&gt;

&lt;p&gt;우여곡절 끝에 요구사항을 구현할 가닥이 어느 정도 보였지만, 아직 실험할 것이 남았다.
그래도 잘 마무리 될 것 같은 생각에 안도감이 들었다.
많이 쓸만한 기능이라 iOS에서 잘 준비되어 있었을 것 같았는데 생각보다 구현이 불편해 많이 당황스러웠다.
이런 이슈를 경험할 기회가 생겨서 다행인 것 같다. 😂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="ui" /><category term="html" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 24: 무한 스크롤을 위한 페이징 API 설계</title><link href="https://jamesu.dev/posts/2021/01/20/til-24-defining-pagination-api-for-infinite-scroll/" rel="alternate" type="text/html" title="TIL 24: 무한 스크롤을 위한 페이징 API 설계" /><published>2021-01-20T00:00:00+09:00</published><updated>2021-01-20T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/20/til-24-defining-pagination-api-for-infinite-scroll</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/20/til-24-defining-pagination-api-for-infinite-scroll/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;무한 스크롤은 페이지 번호를 이용한 고전적인 페이징 기법과 달리 &lt;strong&gt;무한하게 스크롤을 내리는 UX&lt;/strong&gt;에 적합하다.&lt;/li&gt;
  &lt;li&gt;무한 스크롤 페이징 API 설계 시, &lt;strong&gt;정렬 조건&lt;/strong&gt;을 함께 서버에 전달해야 한다.&lt;/li&gt;
  &lt;li&gt;누락되는 항목까지 고려한다면, 더 복잡해질 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;무한-스크롤infinite-scroll이란&quot;&gt;무한 스크롤(Infinite scroll)이란?&lt;/h2&gt;

&lt;p&gt;일반적으로 웹사이트의 게시판에서 쉽게 접할 수 있는 페이징 기법은 “1, 2, 3, …“과 같이 목록의 하단에
페이지 번호가 있고 한 페이지에 특정 갯수가 목록에 보여지는 방식일 것이다.&lt;/p&gt;

&lt;p&gt;이와 달리 &lt;strong&gt;무한 스크롤(Infinite scroll)&lt;/strong&gt;이라 불리는 페이징 기법은 페이지 번호가 따로 없고,
아래로 스크롤하다가 끝에 도달하면 다음 페이지의 목록을 현재 목록에 추가하여 목록을 연장하는 방식이다.
그래서 마치 무한하게 스크롤을 내릴 수 있다하여 무한 스크롤이라 불린다.&lt;/p&gt;

&lt;p&gt;페이지 번호를 사용하는 페이징 기법을 사용할 지, 무한 스크롤을 사용할 지는 기획에 따라 다르며,
컨텐츠의 종류에 따라 적절한 UX를 선택해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;사내-페이징-api의-문제점&quot;&gt;사내 페이징 API의 문제점&lt;/h2&gt;

&lt;p&gt;이번에 신규 모바일 프로젝트를 진행하며, 대량의 목록을 조회할 수도 있는 화면에서 페이징 기법을 사용할 필요가 있었다.
기존의 웹 솔루션을 앱으로 만드는 것이라 서버 팀에서는 웹 API를 그대로 활용하여 모바일 API로 전달해주었으나,
여러가지 문제가 많아 수정을 계속 요청하는 상태였다.&lt;/p&gt;

&lt;p&gt;기존 웹 솔루션에서는 게시판처럼 고전적인 페이징 기법을 사용하고 있었고,
모바일 프로젝트의 화면에서는 무한 스크롤을 기획으로 요구했기 때문에 해당 API를 그대로 사용할 수 없었다.
더군다나 서버 팀의 일정이 바쁜 탓에 설계를 할 시간이 없었고, 가장 적절한 무한 스크롤 기법을 찾기 위해 리서치를 진행했다.&lt;/p&gt;

&lt;h2 id=&quot;무한-스크롤-페이징-api-설계-시-정렬-조건에-유의하자&quot;&gt;무한 스크롤 페이징 API 설계 시, 정렬 조건에 유의하자&lt;/h2&gt;

&lt;p&gt;리서치된 내용을 조합하여 최선을 찾으려 노력했으며, 페이징 API 호출 시 어떤 정보를 서버에 넘길 지가 관건이었다.&lt;/p&gt;

&lt;p&gt;일반적으로는 생성된 날짜를 기준으로 정렬하기 때문에 기준이 되는 항목의 생성된 날짜를 넘기는 식으로 구현이 가능하지만,
해당 프로젝트에는 &lt;strong&gt;정렬 기준이 다소 달랐기 때문에&lt;/strong&gt; 다르게 적용할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;해당 프로젝트의 정렬 기준은 화면마다 다를 수 있어 넘겨야 하는 정보가 그때그때 달랐으며,
페이징 도중에도 언제든지 다음 페이지 항목의 순서가 (데이터로써) 상단으로 땡겨질 수 있기 때문에
누락되는 항목까지 고려해야 할 필요가 있었다.&lt;/p&gt;

&lt;p&gt;결국 어찌저찌 설계를 완료해 서버 팀에 넘겼으나 제대로 적용될 지는 두고 봐야 한다.
예전에는 단순히 주어진 대로 누락될 수 있는 가능성을 무시하고 고전적인 페이징 기법을 사용해 개발했지만,
이번에는 제대로 개발하고자 시도를 해보았다.
추후 좀 더 다듬어 Best Practice가 되도록 만들어야겠다. 👨🏻‍🔧&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ui" /><category term="api" /><category term="rest" /><category term="pagination" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 23: CocoaPods로 인한 Warning 제거</title><link href="https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods/" rel="alternate" type="text/html" title="TIL 23: CocoaPods로 인한 Warning 제거" /><published>2021-01-18T00:00:00+09:00</published><updated>2021-01-18T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CocoaPods로 외부 라이브러리 설치 후 생기는 Warning은 &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; 훅으로 쉽게 제거할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;신경-쓰이는-warning-제거하기&quot;&gt;신경 쓰이는 Warning 제거하기&lt;/h2&gt;

&lt;p&gt;개인적으로 Xcode에 노란색 Warning이 보이면 굉장히 거슬려서 가능하면 모두 제거하려고 하는 편이다.
어떤 종류의 Warning이라도 검색을 통해 기필코 제거하려 한다.
Warning이 치명적인 버그를 낳을 수도 있지만, 뭔가 잘못 코딩한 것 같은 느낌을 들게 하기 때문이다.&lt;/p&gt;

&lt;p&gt;사내에서 외부 라이브러리 연동으로 CocoaPods를 주로 사용하는데,
언제부턴가 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;로 외부 라이브러리를 설치하고 난 후에 Xcode에 몇몇 Warning이 뜨기 시작했다.&lt;/p&gt;

&lt;p&gt;치명적인 Warning은 아니기 때문에 Xcode에서 제공하는 설정 값 갱신 기능을 사용하면 쉽게 제거할 수 있다.
하지만, 다른 개발자가 프로젝트를 이어 받아 진행할 수도 있고, 외부 라이브러리 설치 시마다 거슬릴 수 있으므로
설정 값 갱신조차 필요하지 않도록 하고 싶었다.&lt;/p&gt;

&lt;h2 id=&quot;post_install-hook&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; Hook&lt;/h2&gt;

&lt;p&gt;CocoaPods에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt;
&lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#post_install&quot; target=&quot;_blank&quot;&gt;훅&lt;/a&gt;이 존재하는데,
이를 이용하면 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt; 설치 후 수행할 처리&lt;/strong&gt;를 정의할 수 있다.
앞서 발생한 Warning은 외부 라이브러리에 특정 설정 값이 적절하지 않게 세팅되어 발생한 것으로 해당 값을
&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt; 설치 후 적절하게 세팅하도록 처리하면 된다.&lt;/p&gt;

&lt;p&gt;다음과 같은 훅을 추가해 설치된 외부 라이브러리의 &lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED&lt;/code&gt;와
&lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER&lt;/code&gt; 값이 적절하게 세팅되도록 했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;post_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pods_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'YES'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NO'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;노란색 Warning들이 깔끔하게 사라진 것을 보고 아주 만족했다. 🙂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="xcode" /><summary type="html">TL;DR</summary></entry></feed>