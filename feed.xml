<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://jamesu.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jamesu.dev/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2021-01-20T21:59:08+09:00</updated><id>https://jamesu.dev/</id><title type="html">Jamesu Devlog</title><subtitle>Dev Blog by James Minsu Jeon</subtitle><author><name>jamesujeon</name><email>jamesujeon@gmail.com</email></author><entry><title type="html">TIL 23: CocoaPods로 인한 Warning 제거</title><link href="https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods/" rel="alternate" type="text/html" title="TIL 23: CocoaPods로 인한 Warning 제거" /><published>2021-01-18T00:00:00+09:00</published><updated>2021-01-18T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/18/til-23-removing-warnings-caused-by-cocoapods/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;CocoaPods로 외부 라이브러리 설치 후 생기는 Warning은 &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; 훅으로 쉽게 제거할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;신경-쓰이는-warning-제거하기&quot;&gt;신경 쓰이는 Warning 제거하기&lt;/h2&gt;

&lt;p&gt;개인적으로 Xcode에 노란색 Warning이 보이면 굉장히 거슬려서 가능하면 모두 제거하려고 하는 편이다.
어떤 종류의 Warning이라도 검색을 통해 기필코 제거하려 한다.
Warning이 치명적인 버그를 낳을 수도 있지만, 뭔가 잘못 코딩한 것 같은 느낌을 들게 하기 때문이다.&lt;/p&gt;

&lt;p&gt;사내에서 외부 라이브러리 연동으로 CocoaPods를 주로 사용하는데,
언제부턴가 &lt;code class=&quot;highlighter-rouge&quot;&gt;pod install&lt;/code&gt;로 외부 라이브러리를 설치하고 난 후에 Xcode에 몇몇 Warning이 뜨기 시작했다.&lt;/p&gt;

&lt;p&gt;치명적인 Warning은 아니기 때문에 Xcode에서 제공하는 설정 값 갱신 기능을 사용하면 쉽게 제거할 수 있다.
하지만, 다른 개발자가 프로젝트를 이어 받아 진행할 수도 있고, 외부 라이브러리 설치 시마다 거슬릴 수 있으므로
설정 값 갱신조차 필요하지 않도록 하고 싶었다.&lt;/p&gt;

&lt;h2 id=&quot;post_install-hook&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt; Hook&lt;/h2&gt;

&lt;p&gt;CocoaPods에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;post_install&lt;/code&gt;
&lt;a href=&quot;https://guides.cocoapods.org/syntax/podfile.html#post_install&quot; target=&quot;_blank&quot;&gt;훅&lt;/a&gt;이 존재하는데,
이를 이용하면 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt; 설치 후 수행할 처리&lt;/strong&gt;를 정의할 수 있다.
앞서 발생한 Warning은 외부 라이브러리에 특정 설정 값이 적절하지 않게 세팅되어 발생한 것으로 해당 값을
&lt;code class=&quot;highlighter-rouge&quot;&gt;pod&lt;/code&gt; 설치 후 적절하게 세팅하도록 처리하면 된다.&lt;/p&gt;

&lt;p&gt;다음과 같은 훅을 추가해 설치된 외부 라이브러리의 &lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED&lt;/code&gt;와
&lt;code class=&quot;highlighter-rouge&quot;&gt;CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER&lt;/code&gt; 값이 적절하게 세팅되도록 했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;post_install&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;installer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pods_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'YES'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;build_settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'NO'&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;노란색 Warning들이 깔끔하게 사라진 것을 보고 아주 만족했다. 🙂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="xcode" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 22: 커스텀 컨테이너 뷰 컨트롤러 개선 2</title><link href="https://jamesu.dev/posts/2021/01/11/til-22-improving-custom-container-view-controller-2/" rel="alternate" type="text/html" title="TIL 22: 커스텀 컨테이너 뷰 컨트롤러 개선 2" /><published>2021-01-11T00:00:00+09:00</published><updated>2021-01-11T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/11/til-22-improving-custom-container-view-controller-2</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/11/til-22-improving-custom-container-view-controller-2/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;커스텀 탭바 컨트롤러를 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;와 유사하도록 구현했다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;의 자식 뷰 컨트롤러 관리 방식의 차이를 이해해야 한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;탭바-컨트롤러-vs-네비게이션-컨트롤러&quot;&gt;탭바 컨트롤러 vs. 네비게이션 컨트롤러&lt;/h2&gt;

&lt;p&gt;이번에도 역시나 요구사항에 맞추기 위해 커스텀 탭바 컨트롤러를 만들기로 했다.&lt;br /&gt;
&lt;a href=&quot;https://jamesu.dev/posts/2021/01/09/til-21-improving-custom-container-view-controller/&quot; target=&quot;_blank&quot;&gt;이전&lt;/a&gt;과 마찬가지로
Root 뷰 생명 주기와 부모-자식 관계 설정의 생명 주기를 신경 쓰며 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;의 리버스 엔지니어링을 시도했다.
헷갈리는 동작도 있었지만, 일부 동작의 경우 커스텀 탭바 컨트롤러와 다를 수 밖에 없기에 인지하고 다른 식으로 구현했다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와 달리 미리 다수의 자식 뷰 컨트롤러를 추가해 놓는다.
그래서 자식 뷰 컨트롤러 목록을 세팅한 후에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;addChild&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;removeFromParent&lt;/code&gt; 메소드를 호출할 일이 없었다.&lt;/p&gt;

&lt;p&gt;또한, Root 뷰 생명 주기가 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와는 좀 다른 순서로 호출되었다.
역시나 직접 리버스 엔지니어링을 하길 잘한 것 같다.
예상만으로 구현했다면 뒤늦게 발견해서 고생하며 뒤집었을지도 모른다. 😞&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UITabBarController&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;의 차이를 계속 비교하며 커스텀 탭바 컨트롤러를 구현했다.
일단 메뉴가 변동되는 경우는 거의 없기 때문에 가장 필요한 부분에 한해서 구현을 진행했다.
필요하면 그때 계속 개선하면 되지 않을까..?&lt;/p&gt;

&lt;h2 id=&quot;다음은-스플릿-뷰-컨트롤러&quot;&gt;다음은.. 스플릿 뷰 컨트롤러..?&lt;/h2&gt;

&lt;p&gt;커스텀 컨테이너 뷰 컨트롤러를 하나하나 구현하고 사용해보니 잘 동작할 때 아주 뿌듯하다.
뭔가 일반적인 뷰를 구현한 것과는 달리 좀 더 유용한 것을 만든 기분이 든다.&lt;/p&gt;

&lt;p&gt;또 다른 컨테이너 뷰 컨트롤러로 스플릿 뷰 컨트롤러가 있다.
아이패드에서 자주 사용하는 컨트롤러인데, 아직 사내에서는 쓸 일이 없다…
언젠가 커스텀 스플릿 뷰 컨트롤러를 만들 기회도 생기지 않을까?&lt;/p&gt;

&lt;p&gt;그 밖에도 자식 뷰 컨트롤러를 담는 것이라면, 모두 컨테이너 뷰 컨트롤러가 될 수 있다.
이번에 좀 더 공부해서 &lt;strong&gt;커스텀 컨테이너 뷰 컨트롤러&lt;/strong&gt;를 구현하기 위한 분석을 많이 해보고 글로 정리해 봐야겠다. 🔥&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="ui" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 21: 커스텀 컨테이너 뷰 컨트롤러 개선</title><link href="https://jamesu.dev/posts/2021/01/09/til-21-improving-custom-container-view-controller/" rel="alternate" type="text/html" title="TIL 21: 커스텀 컨테이너 뷰 컨트롤러 개선" /><published>2021-01-09T00:00:00+09:00</published><updated>2021-01-09T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/09/til-21-improving-custom-container-view-controller</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/09/til-21-improving-custom-container-view-controller/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;기존 커스텀 네비게이션 컨트롤러가 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와 유사하도록 개선을 진행했다.&lt;/li&gt;
  &lt;li&gt;아직 만족스럽지 않아 개선이 더 필요하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;기존-커스텀-네비게이션-컨트롤러의-문제점&quot;&gt;기존 커스텀 네비게이션 컨트롤러의 문제점&lt;/h2&gt;

&lt;p&gt;요구사항에 따라 개발을 하다 보면, &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;에서 제공하는 컨테이너 뷰 컨트롤러만으로는 만족스럽게 결과물이 나오지 않는 경우가 있다.
또한, UI나 애니메이션 등을 완전히 커스텀하고 싶을 때도 기존 라이브러리로는 한계가 있을 수 있다.
&lt;strong&gt;결국에는 직접 커스텀 컨테이너 뷰 컨트롤러를 만드는 것이 오히려 마음이 편하다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;그렇게 해서 직접 만들어서 사용하던 커스텀 네비게이션 컨트롤러가 있었는데,
현재 사용하는 데는 문제점이 없었지만 미래에 발생할 수 있는 문제점이 존재했다.
그것은 바로 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와 동작이 완전히 일치하지 않는다는 점&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;물론, 현재 사용하는 것에 문제점이 없었다는 말은 특정 동작만 사용했기 때문인데,
이것은 추후 유지보수를 진행할 때 찾기 어려운 버그가 생길 수 있다.
그렇게 개선의 필요성을 느끼게 됐고, 커스텀 컨테이너 뷰 컨트롤러를 위한 분석을 진행했다.&lt;/p&gt;

&lt;h2 id=&quot;개선-방향&quot;&gt;개선 방향&lt;/h2&gt;

&lt;p&gt;기존에 반영한 생명 주기는 많이 사용하고 있는 뷰 컨트롤러의 기본적인 Root 뷰 생명 주기이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidLoad&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillAppear&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidAppear&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewWillDisappear&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;viewDidDisappear&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;해당 메소드들을 자식 뷰 컨트롤러가 추가 또는 제거되는 시점에 따라 호출하도록 구현했었다.&lt;/p&gt;

&lt;p&gt;하지만, 실제로 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIKit&lt;/code&gt;에서 제공하는 네비게이션 컨트롤러와 호출되는 순서가 일치하지 않았기에 동일한 순서가 되도록 수정을 진행했다.
애니메이션이 포함되어 있는 경우 시점을 잘 지정해 구현해야 했다.
시점이 어긋나면, 자식 뷰 컨트롤러의 생명 주기를 구현할 때 예상치 못한 순서로 동작할 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 뷰 컨트롤러는 기본적으로 부모-자식 관계를 설정해서 활용할 수 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; 프로퍼티가 존재했는데,
나는 별도로 부모를 나타내는 프로퍼티와 &lt;code class=&quot;highlighter-rouge&quot;&gt;viewControllers&lt;/code&gt; 프로퍼티를 정의해 사용하고 있었다.
이것을 &lt;code class=&quot;highlighter-rouge&quot;&gt;addChild&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;removeFromParent&lt;/code&gt; 메소드를 호출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;parent&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;children&lt;/code&gt; 프로퍼티를 활용하도록 수정했다.&lt;/p&gt;

&lt;p&gt;또한, Root 뷰 생명 주기와 부모-자식 관계 설정의 생명 주기를 &lt;code class=&quot;highlighter-rouge&quot;&gt;UINavigationController&lt;/code&gt;와 맞추기 위한 작업을 추가로 진행했다.
아무래도 iOS 개발자는 기본으로 제공하는 생명 주기에 익숙할 터이니 그것의 생명 주기에 맞추는 게 적합하다고 생각했다.&lt;/p&gt;

&lt;p&gt;마지막으로 Apple Developer 문서에서
&lt;a href=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621387-beginappearancetransition&quot; target=&quot;_blank&quot;&gt;뷰 생명 주기 메소드를 직접 호출하지 말라&lt;/a&gt;고 하고 있어,
해당 메소드들을 &lt;code class=&quot;highlighter-rouge&quot;&gt;beginAppearanceTransition&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;endAppearanceTransition&lt;/code&gt;를 호출하도록 수정했다.&lt;/p&gt;

&lt;p&gt;아직 커스텀 컨테이너 뷰 컨트롤러에 대한 분석이 다 된 것 같지 않아 만족스럽지 않다.&lt;br /&gt;
더 분석해보고 적용한 뒤 글을 정리해 포스팅 해봐야겠다. 🕵🏻&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="ios" /><category term="ui" /><summary type="html">TL;DR</summary></entry><entry><title type="html">Jekyll에 검색 페이지 추가하기</title><link href="https://jamesu.dev/posts/2021/01/03/adding-search-page-on-jekyll/" rel="alternate" type="text/html" title="Jekyll에 검색 페이지 추가하기" /><published>2021-01-03T00:00:00+09:00</published><updated>2021-01-03T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/03/adding-search-page-on-jekyll</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/03/adding-search-page-on-jekyll/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;검색 기능으로 &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search&quot; target=&quot;_blank&quot;&gt;Simple-Jekyll-Search&lt;/a&gt;
라이브러리를 사용하면, Jekyll에 간단한 검색 기능을 추가할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;블로그에 글을 올리다 보니 간혹 내가 필요한 정보를 찾고 싶을 때 찾을 수 없는 치명적인 문제가 있었다.
그래서 검색 기능의 필요성을 절실히 느꼈고, 어떻게 구현하면 좋을지 컨셉을 고민했다.
현재 블로그의 형태 특성상 검색창이 항상 보이는 것보다 &lt;strong&gt;검색 기능에만 집중할 수 있는 검색 페이지&lt;/strong&gt;를 구현해야겠다는 결론에 도달했다.&lt;/p&gt;

&lt;p&gt;이제 방법을 생각해야 하는데, 정적 사이트 특성상 데이터를 위한 별도의 서버를 가지고 있지 않기 때문에
일반적인 서비스의 구현하고 다른 방식의 관점으로 접근해야 했다.
검색할 데이터를 미리 준비하고, 해당 데이터에서 원하는 항목을 검색한 후 보여줘야겠다고 생각했다.&lt;/p&gt;

&lt;p&gt;마침 &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search&quot; target=&quot;_blank&quot;&gt;Simple-Jekyll-Search&lt;/a&gt;라는
말그대로 심플한 컨셉의 Jekyll 검색 기능을 위한 오픈 소스 라이브러리가 있었다.
내가 생각했던 것처럼 JSON 파일 형식으로 미리 데이터를 준비하고, 해당 파일로부터 원하는 항목을 검색해 정보로 조립하는 것이었다.
작성일 기준 1.1K 개의 별을 가지고 있을 만큼 신뢰성이 어느 정도 있었기 때문에 바로 사용하기로 했다.&lt;/p&gt;

&lt;h2 id=&quot;simple-jekyll-search-연동하기&quot;&gt;Simple-Jekyll-Search 연동하기&lt;/h2&gt;

&lt;p&gt;나는 여러가지 방법 중에 직접 필요한 부분만 블로그에 넣는 방식으로 연동을 진행했다.
결국에는 Jekyll의 빌드 과정과 JavaScript의 로직을 통해 검색 기능이 구현되는 것이기 때문에 관련한 것만 잘 연동한다면,
최소한의 파일만 사용해서 원하는대로 동작 구현이 가능하다.&lt;/p&gt;

&lt;p&gt;연동에 앞서 오픈 소스 라이브러리를 사용할 때 가장 이해하기 쉬운 방법이
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/tree/master/example&quot; target=&quot;_blank&quot;&gt;예제&lt;/a&gt;와
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/wiki&quot; target=&quot;_blank&quot;&gt;가이드&lt;/a&gt;를 보는 것이라 생각한다.
연동 과정이 이해가 가지 않는 경우, 앞의 링크를 참고해 실제 코드와 가이드를 보면서 동작 방식을 이해한다면 더 수월하게 연동을 할 수 있을 것이다.&lt;/p&gt;

&lt;h3 id=&quot;1-필요한-파일-넣기&quot;&gt;1. 필요한 파일 넣기&lt;/h3&gt;

&lt;p&gt;원하는 기능에 따라 필요한 파일은 다를 수 있지만, 기본적으로 다음과 같은 파일만 있으면 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;simple-jekyll-search.min.js&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;simple-jekyll-search.js&lt;/code&gt;
(&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/tree/master/example/js&quot; target=&quot;_blank&quot;&gt;링크&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;search.json&lt;/code&gt;
(&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/blob/master/example/search.json&quot; target=&quot;_blank&quot;&gt;링크&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JavaScript 파일은 검색 데이터로부터 &lt;strong&gt;검색 기능&lt;/strong&gt;을 사용하기 위한 라이브러리 파일이고,
JSON 파일은 검색 대상이 되는 &lt;strong&gt;검색 데이터&lt;/strong&gt;를 준비하기 위한 파일이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*.min.js&lt;/code&gt; 파일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; 파일의 압축 버전이라 보면 된다.&lt;br /&gt;
동일한 로직으로 구현되어 있기 때문에 어느 쪽을 사용해도 무관하다.
만약 커스터마이징을 하고 싶은 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;*.min.js&lt;/code&gt; 파일을 수정하는 것은 매우 난감하기 때문에
&lt;code class=&quot;highlighter-rouge&quot;&gt;*.js&lt;/code&gt; 파일을 사용하는 것을 추천한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;simple_search_filter.rb&lt;/code&gt;와 같은 플러그인은 왜 추가하지 않는지 의문이 있을 수 있다.
해당 코드를 보면 함수 몇가지를 정의해 놓았는데, 해당 함수를 사용하지 않으며 필수적으로 필요하지도 않기 때문에 첨부하지 않았다.&lt;/p&gt;

&lt;h3 id=&quot;2-검색-데이터-준비&quot;&gt;2. 검색 데이터 준비&lt;/h3&gt;

&lt;p&gt;Jekyll로 만든 블로그는 정적 사이트이기 때문에 검색을 하기 위해 미리 생성된 데이터가 필요하다.
(물론, 별도의 서버를 가지고 있거나 데이터를 준비하는 곳이 있다면 상관 없다.)
이를 위해 예제 프로젝트에 있는 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;search.json&lt;/code&gt; 파일&lt;/strong&gt;이 필요하다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;---
layout: none
---
[
  {% for post in site.posts %}
    {
      &quot;title&quot;    : &quot;{{ post.title | escape }}&quot;,
      &quot;category&quot; : &quot;{{ post.category }}&quot;,
      &quot;tags&quot;     : &quot;{{ post.tags | join: ', ' }}&quot;,
      &quot;url&quot;      : &quot;{{ site.baseurl }}{{ post.url }}&quot;,
      &quot;date&quot;     : &quot;{{ post.date }}&quot;
    } {% unless forloop.last %},{% endunless %}
  {% endfor %}
]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;해당 파일을 보면 위와 같이 되어 있는데, &lt;strong&gt;Jekyll의 Liquid 문법으로 JSON 데이터를 생성&lt;/strong&gt;하는 것을 볼 수 있다.
전체 포스트를 순회하며 제목, 카테고리, 태그, URL, 날짜 등을 객체로 구성해 배열로 만든다.
따라서 Jekyll로 사이트를 생성할 때 검색 데이터가 JSON 배열로 준비된다.&lt;/p&gt;

&lt;p&gt;검색 대상이 되길 원하는 항목이 더 있다면, JSON과 Liquid 문법에 맞춰 추가하면 검색 대상에 포함된다.&lt;br /&gt;
참고로 현재 구현된 검색 페이지에 사용되는 JSON 파일은 다음과 같다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;---
layout: none
---
[
  {% for post in site.posts %}
    {
      &quot;title&quot;      : {{ post.title | jsonify }},
      &quot;categories&quot; : &quot;{{ post.categories | join: ' &amp;gt; ' }}&quot;,
      &quot;tags&quot;       : &quot;{{ post.tags | join: ', ' }}&quot;,
      &quot;date&quot;       : &quot;{{ post.date | date: '%Y.%m.%d' }}&quot;,
      &quot;urlString&quot;  : &quot;{{ post.url }}&quot;,
      &quot;url&quot;        : &quot;{{ post.url | prepend: site.baseurl }}&quot;
    }{% unless forloop.last %},{% endunless %}
  {% endfor %}
]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이처럼 검색되길 원하는 문자열로 구성해 데이터를 준비할 수 있도록 한다.&lt;br /&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;urlString&lt;/code&gt;의 경우, 추후 사용되는 목적이 있어 추가로 넣었다.)&lt;/p&gt;

&lt;h3 id=&quot;3-검색-부분-레이아웃-구성&quot;&gt;3. 검색 부분 레이아웃 구성&lt;/h3&gt;

&lt;p&gt;검색 기능을 위해 일반적으로 &lt;strong&gt;검색어 입력&lt;/strong&gt;을 위한 입력 부분과 &lt;strong&gt;검색 결과&lt;/strong&gt;를 보여주기 위한 출력 부분이 필요하다.
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/blob/master/example/_layouts/default.html&quot; target=&quot;_blank&quot;&gt;예제 프로젝트&lt;/a&gt;에서는
&lt;code class=&quot;highlighter-rouge&quot;&gt;search-demo-container&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; 요소 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;search-input&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 요소를 입력 부분으로,
&lt;code class=&quot;highlighter-rouge&quot;&gt;results-container&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; 요소를 출력 부분으로 사용하고 있다.&lt;/p&gt;

&lt;p&gt;일반적으로 그것과 동일하게 사용하면 된다.&lt;br /&gt;
참고로 현재 구현된 검색 페이지에 사용되는 레이아웃은 꾸미는 것을 가미해 다음과 같이 작성했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;common-header search&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;i&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fas fa-search fa-fw&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-input&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;tabindex=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;spellcheck=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; 
      &lt;span class=&quot;na&quot;&gt;placeholder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Search&quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-results&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;예제 프로젝트와 비슷하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;search-input&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 요소를 입력 부분으로,
&lt;code class=&quot;highlighter-rouge&quot;&gt;search-results&lt;/code&gt; ID의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ul&lt;/code&gt; 요소를 출력 부분으로 사용하고 있다.&lt;/p&gt;

&lt;h3 id=&quot;4-검색-기능-연동&quot;&gt;4. 검색 기능 연동&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/blob/master/example/_layouts/default.html&quot; target=&quot;_blank&quot;&gt;예제 프로젝트&lt;/a&gt;의
하단 부분을 보면, 다음과 같이 JavaScript 코드가 작성되어 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{{ site.baseurl }}/js/simple-jekyll-search.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simpleJekyllSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleJekyllSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;searchInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resultsContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;results-container&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{{ site.baseurl }}/search.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;searchResultTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a href=&quot;{url}?query={query}&quot; title=&quot;{desc}&quot;&amp;gt;{title}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;noResultsText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;No results found&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;fuzzy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Welcome&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;simple-jekyll-search.min.js&lt;/code&gt; 파일을 불러와 사용하고 있으며, 해당 파일을 어디에 두었냐에 따라 경로는 변경될 수 있다.
또한, 편의를 위해 전체 JavaScript 파일을 불러오는 곳에서 해당 파일을 불러와도 된다.&lt;/p&gt;

&lt;p&gt;검색 기능을 연동하기 위해 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SimpleJekyllSearch&lt;/code&gt; 객체를 생성해 &lt;code class=&quot;highlighter-rouge&quot;&gt;window.simpleJekyllSearch&lt;/code&gt;에 할당&lt;/strong&gt;해야 한다.
그 이후부터는 전달한 옵션에 따라 검색 기능이 작동하게 된다.&lt;/p&gt;

&lt;p&gt;여기서 가장 중요한 부분은 필수 옵션을 정확히 세팅해야 한다는 것이다.&lt;br /&gt;
헷갈리는 것이 있다면, &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/wiki&quot; target=&quot;_blank&quot;&gt;가이드&lt;/a&gt;를 참고해
세팅하길 바란다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;searchInput&lt;/code&gt;: 입력 부분에 해당하는 요소&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;resultsContainer&lt;/code&gt;: 출력 부분에 해당하는 요소&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt;: 검색 대상이 되는 검색 데이터가 있는 JSON 파일&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultTemplate&lt;/code&gt;: 검색된 항목이 출력 부분에 표시되는 레이아웃.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;{}&lt;/code&gt; 안에 JSON 객체의 Key를 입력해 검색된 데이터를 맵핑한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고로 현재 구현된 검색 페이지에 사용되는 JavaScript 코드는 다음과 같다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pointColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getComputedStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;documentElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPropertyValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;--point-color&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simpleJekyllSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SimpleJekyllSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;searchInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;resultsContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-results&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{{ site.baseurl }}/assets/json/search-data.json&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;searchResultTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`
      &amp;lt;li&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-folder fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot;&amp;gt;{categories}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-book fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot;&amp;gt;{title}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-tags fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot;&amp;gt;{tags}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-calendar-alt fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot;&amp;gt;{date}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div&amp;gt;
          &amp;lt;i class=&quot;fas fa-link fa-fw&quot;&amp;gt;&amp;lt;/i&amp;gt;
          &amp;lt;a href=&quot;{url}&quot; style=&quot;font-size: 1rem;&quot;&amp;gt;{urlString}&amp;lt;/a&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/li&amp;gt;
    `&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;templateMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt; &lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lowerCaseValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lowerCaseValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;noResultsText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;simpleJekyllSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;search-input&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;기본적인 것은 예제 프로젝트와 동일하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultTemplate&lt;/code&gt; 옵션이 복잡해지고, &lt;code class=&quot;highlighter-rouge&quot;&gt;templateMiddleware&lt;/code&gt; 옵션이 추가되었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultTemplate&lt;/code&gt; 옵션은 검색 결과에 아이콘을 추가해 꾸미기 위해 복잡해졌고,
&lt;code class=&quot;highlighter-rouge&quot;&gt;templateMiddleware&lt;/code&gt; 옵션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;searchResultTemplate&lt;/code&gt;에 검색된 데이터가 맵핑되기 전에 수행할 변환 작업을 위해 사용되었다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;templateMiddleware&lt;/code&gt; 옵션에 사용되는 함수의 로직이 굉장히 복잡해 보이는데,
그 목적은 &lt;strong&gt;검색어에 해당하는 부분을 강조 표시하기 위한 용도&lt;/strong&gt;이다.
더불어 실제 검색 대상이 되는 항목(제목, 카테고리, 태그 등)만 강조 표시를 하도록 로직을 추가했다.
그 결과는 다음과 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;검색 페이지 구현 결과&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-검색-페이지-추가&quot;&gt;5. 검색 페이지 추가&lt;/h3&gt;

&lt;p&gt;마지막으로 구성한 레이아웃과 구현한 JavaScript 코드를 원하는 곳에 넣고 페이지로 추가하면 된다.
이것은 예제 프로젝트에는 없는 부분으로, 다른 페이지를 구성하던 방식과 동일하게 페이지를 추가할 수 있다.&lt;/p&gt;

&lt;p&gt;현재 구현된 검색 페이지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;search.html&lt;/code&gt; 파일에 HTML 레이아웃과 JavaScript 코드를 모두 넣고, &lt;code class=&quot;highlighter-rouge&quot;&gt;_layouts&lt;/code&gt; 디렉터리에 포함시켰다.
그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;_pages&lt;/code&gt; 디렉터리에 &lt;code class=&quot;highlighter-rouge&quot;&gt;search.md&lt;/code&gt; 파일을 만들어 &lt;code class=&quot;highlighter-rouge&quot;&gt;layout&lt;/code&gt;으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;search&lt;/code&gt;를 작성했다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;search&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Search&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;permalink&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/search&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이제 해당 레이아웃은 검색 페이지로 생성될 것이다.
나머지 할 작업은 (Search 메뉴처럼) 원하는 곳에 해당 URL을 연결해 진입하도록 하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;후기&quot;&gt;후기&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Simple&lt;/strong&gt;-Jekyll-Search라는 이름에 걸맞게 정말 &lt;strong&gt;간단한&lt;/strong&gt; 검색 기능만 제공하는 라이브러리라 원하는 동작을 구현하는데 어려움이 많았다.
그래도 나름 적정선에 스스로 합의(?)를 해서 검색 기능 구현이 마무리된 것 같다.
그리고 기능 구현을 하면서 &lt;a href=&quot;https://jamesu.dev/posts/2020/12/26/til-19-contribution-for-simple-jekyll-search-oss/&quot; target=&quot;_blank&quot;&gt;해당 라이브러리의 버그를 찾아 MR도 시도&lt;/a&gt;해봤고, 실제 받아들여지기까지 하여 재밌는 경험이었다.&lt;/p&gt;

&lt;p&gt;결론적으로 원하는 글을 찾는 데는 문제 없는 수준이 된 것 같아 꽤나 만족스럽지만, 공대 감성의 디자인을 한 것은 어쩔 수 없는 것 같다. 🤔&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="jekyll" /><category term="javascript" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 20: 2020년 회고</title><link href="https://jamesu.dev/posts/2021/01/01/til-20-2020-retrospective/" rel="alternate" type="text/html" title="TIL 20: 2020년 회고" /><published>2021-01-01T00:00:00+09:00</published><updated>2021-01-01T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2021/01/01/til-20-2020-retrospective</id><content type="html" xml:base="https://jamesu.dev/posts/2021/01/01/til-20-2020-retrospective/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub 연속 일일 커밋은 나름 성공적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;232&lt;/code&gt;일째 진행중이다.&lt;/li&gt;
  &lt;li&gt;TIL은 &lt;code class=&quot;highlighter-rouge&quot;&gt;개발 일기&lt;/code&gt;로 생각하고 많이 분발해 작성하자.&lt;/li&gt;
  &lt;li&gt;작년의 프로젝트는 모두 만족스럽고 재밌었다.
    &lt;ul&gt;
      &lt;li&gt;Objective-C to Swift 포팅&lt;/li&gt;
      &lt;li&gt;iOS/Android 앱 디자인 리뉴얼&lt;/li&gt;
      &lt;li&gt;사내 iOS 공통 라이브러리 개발&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;올해의 프로젝트에 iOS 개발 트렌드를 반영하자.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;iOS 디자인 패턴: &lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CI/CD&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;iOS에 집중해 &lt;code class=&quot;highlighter-rouge&quot;&gt;깊이가 깊은 iOS 개발자&lt;/code&gt;가 되자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;today-i-committed&quot;&gt;Today I Committed&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/github_2020_contributions.png&quot; alt=&quot;GitHub 2020 Contributions&quot; width=&quot;100%&quot; /&gt;
&lt;em&gt;GitHub Contributions in 2020&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;GitHub를 사용하면서 개인적인 성취감을 위해 일일 커밋을 4월 초부터 시작했다.
그러다 4월 11일에 한 번 구멍이 생기고, 5월 13일에 한 번 더 구멍이 생기면서…
2020년의 연속 일일 커밋은 아쉽게 &lt;strong&gt;232일째&lt;/strong&gt;로 끝이 났다.&lt;/p&gt;

&lt;p&gt;일일 커밋은 하루 한 줄이라도 코드를 작성하면서 그 감을 잃지 않고 꾸준함을 유지하려는 목적으로 시작했다.
약속이 있는 날, 바쁜 날 등처럼 일일 커밋을 하기 힘든 날에도 계속 신경써서 연속 일일 커밋을 유지한 나에게 작은 칭찬을 하고 싶다.&lt;/p&gt;

&lt;p&gt;이제는 일일 커밋이 매일 떠오를 정도로 습관이 몸에 배어 2021년에도 실수하지만 않으면 연속 일일 커밋을 할 수 있을 것 같다.
2021년에는 4월 11일, 5월 13일과 같은 구멍이 발생하지 않도록 조심하며, 꾸준히 신기록을 갱신하고 싶다.&lt;br /&gt;
2021년의 Contributions에는 초록색으로 가득차길 바라며, 오늘도 나는 커밋 잔디를 심는다… 🌱&lt;/p&gt;

&lt;h2 id=&quot;today-i-learned-but&quot;&gt;Today I Learned, but…&lt;/h2&gt;

&lt;p&gt;5월에는 &lt;strong&gt;TIL&lt;/strong&gt;에 관심이 생기면서 TIL을 일일 커밋 겸 작성하려고 했으나… 매일 글을 쓰는 게 나에게는 너무 어려웠다.
&lt;strong&gt;일일 배움&lt;/strong&gt;이라는 마음가짐으로 TIL을 시작했기에 무엇이라도 배운 것이 있을 때 그것에 대해 작성했고, 생각보다 소재 고갈이 잦았다.
(물론, 배운 것이 있었지만 글로 안 쓴 것도 많다… 🤔)&lt;/p&gt;

&lt;p&gt;TIL 작성은 &lt;strong&gt;6월 이후부터 12월이 되기 전까지는 전무&lt;/strong&gt;했고, 일일 커밋은 주로 원래 하던 문제 풀이를 통해 진행했다.
아무래도 글쓰기가 익숙하지 않아서 그런지 (많이 어렵지 않은) 문제 풀이가 글쓰기보다는 쉬웠다.
글을 고치는 게 잦아서 글쓰기에 많은 시간이 들어가고, 새로운 문장을 생각해내는 것도 어려웠다.&lt;/p&gt;

&lt;p&gt;사실 내 TIL의 원래 취지는 &lt;strong&gt;기록&lt;/strong&gt;하는 것에 초점이 맞춰 있는 &lt;strong&gt;개발 일기&lt;/strong&gt;에 가깝다.
그 초점에 맞추지 않고 TIL을 작성하다 보니 배가 산으로 간 것 같다.
“정성 가득 길게 글을 쓰는 것보다는 무엇을 배웠는 지를 기록하는 것이 목표이므로 앞으로는 그 부담을 덜고 작성했으면 좋겠다.”
라고 2021년의 나에게 말하고 싶다. 🙄&lt;/p&gt;

&lt;h2 id=&quot;today-i-worked&quot;&gt;Today I Worked&lt;/h2&gt;

&lt;p&gt;재작년에는 서버와 웹 프론트엔드 유지보수가 주 업무였다면, 작년은 모바일 업무에 집중할 수 있었던 해였다.
모바일 개발자로 입사했기에 모바일 업무에 집중하는 것이 맞지만 어찌저찌 다른 업무를 맡았어서 모바일 업무만 하고 싶다고 강력 어필 했었다.
결과적으로 4분기에 서버를 잠시 했었지만, 모바일에 집중 할 수 있어 좋았다.&lt;/p&gt;

&lt;p&gt;작년의 대표적인 모바일 성과로는 &lt;strong&gt;Objective-C to Swift 포팅, iOS/Android 앱 디자인 리뉴얼, 사내 iOS 공통 라이브러리 개발&lt;/strong&gt;이 있다.
Swift 포팅은 자진해서 진행했던 프로젝트이고, 앱 디자인 리뉴얼은 전면 개편이라 내부 구조도 바꿔가며 손이 많이 갔다.
마지막으로 사내 iOS 공통 라이브러리 개발은 자주 쓰는 뷰나 기능 등을 모아 라이브러리로 만드는 작업으로 현재 진행형이다.&lt;/p&gt;

&lt;h3 id=&quot;objective-c-to-swift-포팅&quot;&gt;Objective-C to Swift 포팅&lt;/h3&gt;

&lt;p&gt;사내에 Objective-C로 되어 있는 앱들이 있어 유지보수가 매우 힘들었고, 그리하여 효율화를 위해 자진해서 Swift 포팅 프로젝트를 추진했다.
앱 하나에 대해서만 진행했으며, 기존 앱에 요구사항이 덜 적용된 부분도 있어 전체적으로 품질 향상의 효과도 있었다.
디자인 개선도 같이 진행해서 Swift 포팅을 하며 새로 만드는 것이 오히려 더 수월했다.
야근을 많이 해서 힘들었지만, &lt;strong&gt;두 언어의 차이를 느끼며 여러가지를 비교할 기회가 되어 아주 만족스러웠던 프로젝트였다&lt;/strong&gt;. 🙂&lt;/p&gt;

&lt;h3 id=&quot;iosandroid-앱-디자인-리뉴얼&quot;&gt;iOS/Android 앱 디자인 리뉴얼&lt;/h3&gt;

&lt;p&gt;디자인 리뉴얼은 앱 하나의 디자인 전체를 개편하는 작업이라 거의 모든 소스를 건드려야 했다.
그 과정에서 내부 구조도 많이 개선시키면서 두 플랫폼의 요구사항이 맞지 않는 것을 맞춰가는 작업까지 진행했다.
iOS와 안드로이드 모두를 맡다 보니 힘들었지만,
&lt;strong&gt;내부 구조를 분석하면서 어떻게 하면 효율적으로 구조화 할 수 있을지 두 플랫폼 모두에 대해 고민 할 수 있어 큰 경험이 됐다&lt;/strong&gt;.
그래도 앞으로는 주 업무는 iOS만 하고 싶다. 🤔&lt;/p&gt;

&lt;h3 id=&quot;사내-ios-공통-라이브러리-개발&quot;&gt;사내 iOS 공통 라이브러리 개발&lt;/h3&gt;

&lt;p&gt;사내 iOS 공통 라이브러리 개발은 새 앱을 개발하거나 기존 앱을 개선할 때 효율적으로 프로젝트를 진행하고자 추진한 프로젝트다.
앞으로 만들 새 앱에 대한 일관성 있는 디자인과 기능을 적용하고자 디자인 팀과 빈번하게 의사소통하며 요구사항을 정리했다.
커스터마이징도 가능하게 만들면서 공통적인 부분만 추출해 구현하고자 노력했다.
&lt;strong&gt;앱을 만드는 관점과 달리 라이브러리를 만드는 관점에서 구현을 하다보니 두 관점이 많이 다르다는 것을 느낄 수 있었다&lt;/strong&gt;. 🙂&lt;/p&gt;

&lt;h2 id=&quot;tomorrow-i-will-learn&quot;&gt;Tomorrow I will Learn&lt;/h2&gt;

&lt;p&gt;여러 개발 분야의 트렌드는 모두 빠르게 바뀌고 발전하고 있다.
모바일 개발 트렌드 또한 새로운 것이 생겨나고 기존 것이 발전하고 있는데,
트렌드를 계속 접하고는 있으나 지금까지 제대로 프로젝트에 반영한 적은 없다.&lt;/p&gt;

&lt;p&gt;최근에 공부하던 모바일 개발 트렌드 중 특히 iOS 개발 트렌드는 &lt;strong&gt;RxSwift, iOS 디자인 패턴, CI/CD&lt;/strong&gt; 등이 있다.
나열한 목록들이 현재 가장 관심이 많고 적용하고 싶은 개발 트렌드에 해당한다.&lt;/p&gt;

&lt;h3 id=&quot;rxswift&quot;&gt;RxSwift&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot; target=&quot;_blank&quot;&gt;RxSwift&lt;/a&gt;는 비동기 및 이벤트 기반 프로그래밍을 지향하는
&lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot;&gt;ReactiveX&lt;/a&gt; 프로젝트의 Swift 버전이다.&lt;br /&gt;
ReactiveX 컨셉으로 프로그래밍을 하면 가독성, 안정성, 효율성 등과 같은
다양한 이점을 얻을 수 있어 개인적으로 가장 적용하고 싶은 트렌드이다.
RxSwift를 틈틈이 공부하고 있어,
&lt;strong&gt;추후 사내 iOS 공통 라이브러리에 Rx 버전을 구현하는 것과 실제 프로젝트에 적용하는 것을 생각하고 있다&lt;/strong&gt;.
굉장히 재밌는 프로그래밍이 될 것 같아 기대가 된다. 🔥&lt;/p&gt;

&lt;h3 id=&quot;ios-디자인-패턴&quot;&gt;iOS 디자인 패턴&lt;/h3&gt;

&lt;p&gt;iOS 디자인 패턴 또는 iOS 아키텍쳐라고도 불리는 이것은 앱의 코드 구성을 의미한다.
iOS의 기본은 MVC로 되어 있고,
이는 비효율적인 코드 구성을 낳기 때문에 사람들은 새로운 구성을 개발해 내었다.&lt;/p&gt;

&lt;p&gt;MVVM, MVP, VIPER, RIBs, ReactorKit 등과 같이 다양한 디자인 패턴이 있지만,
이 중에서 나는 RxSwift와 함께 자주 언급되는 패턴인 &lt;strong&gt;MVVM&lt;/strong&gt;을 프로젝트에 적용하고 싶다.
안드로이드에서도 RxJava, RxKotlin과 함께 자주 사용되는 패턴인 만큼 기본이 되는 패턴이라 생각한다.
일단, &lt;strong&gt;MVVM을 실제 프로젝트에 적용 해보는 방향으로 하고 나머지 패턴은 개인적으로 공부하며 고민해봐야겠다&lt;/strong&gt;. 🤔&lt;/p&gt;

&lt;h3 id=&quot;cicd&quot;&gt;CI/CD&lt;/h3&gt;

&lt;p&gt;CI/CD는 Continuous Integration(지속적 통합)을 뜻하는 CI와
Continuous Delivery(지속적 제공) 또는 Continuous Deployment(지속적 배포)를 뜻하는 CD를 합쳐 부르는 말이다.
이 프로세스는 서버와 웹 프론트엔드 개발에서는 자주 사용하는 프로세스로 모바일 개발에서도 적용한 사례가 꽤 있을 것이다.&lt;/p&gt;

&lt;p&gt;현재 사내 앱 배포는 모든 과정을 사람이 수동으로 진행하고 있어 여러모로 비효율적일 수 있다.
CI/CD를 적용하면 이런 과정이 자동화되므로,
수동 배포 과정에서 발생하는 실수도 방지하고, 배포 과정에 크게 신경을 쓸 필요 없이 그 결과에 대해서만 대응하면 된다.
주 업무가 되는 것에 일을 집중할 수 있으므로 생산성 향상이 기대될 수 있다.&lt;/p&gt;

&lt;p&gt;사내 앱 배포에 CI/CD를 적용하는 것이 적합한 것인가에 대해서는 더 고민할 필요가 있긴 하다.
앞으로 개발자가 더 많아지고, 유닛 테스트가 잘 작성되어진다면, 그 효율성은 체감할 수 있는 수준이 될 것 같다.
&lt;strong&gt;기회가 된다면, &lt;a href=&quot;https://fastlane.tools/&quot; target=&quot;_blank&quot;&gt;Fastlane&lt;/a&gt;을 iOS와 안드로이드 모두에 적용해 프로세스를 개선하고 싶다&lt;/strong&gt;. 🤔&lt;/p&gt;

&lt;h2 id=&quot;tomorrow-i-will-become&quot;&gt;Tomorrow I will Become&lt;/h2&gt;

&lt;p&gt;2021년 올해는 개인적으로 많은 성장을 바라는 해이다.&lt;br /&gt;
작년에는 모바일 개발에 집중할 수 있었지만, 트렌드를 적용 못하고 사내 앱 개편에만 신경을 썼었다.&lt;br /&gt;
올해는 트렌드도 적용해가며 iOS 개발의 깊이를 더해가고 싶다.&lt;/p&gt;

&lt;p&gt;올해의 가장 큰 목표는 &lt;strong&gt;깊이가 깊은 iOS 개발자&lt;/strong&gt;가 되는 것이다.&lt;br /&gt;
그 깊이의 기준은 정할 수 없지만, 스스로 열심히 했다고 생각이 들 정도로 노력을 해보자. 🔥&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="idea" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 19: Simple-Jekyll-Search 오픈 소스 기여</title><link href="https://jamesu.dev/posts/2020/12/26/til-19-contribution-for-simple-jekyll-search-oss/" rel="alternate" type="text/html" title="TIL 19: Simple-Jekyll-Search 오픈 소스 기여" /><published>2020-12-26T00:00:00+09:00</published><updated>2020-12-26T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/12/26/til-19-contribution-for-simple-jekyll-search-oss</id><content type="html" xml:base="https://jamesu.dev/posts/2020/12/26/til-19-contribution-for-simple-jekyll-search-oss/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;이 블로그에 검색 기능을 넣고 싶어서
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search&quot; target=&quot;_blank&quot;&gt;Simple-Jekyll-Search&lt;/a&gt;
라이브러리를 적용하려 했다.&lt;/li&gt;
  &lt;li&gt;버그를 발견해 수정해서 Simple-Jekyll-Search 라이브러리에
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/pull/162&quot; target=&quot;_blank&quot;&gt;PR&lt;/a&gt;을 보냈다.&lt;/li&gt;
  &lt;li&gt;Merge되면 좋겠다.&lt;/li&gt;
  &lt;li&gt;오픈 소스 분석은 은근 재밌다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;버그-발견-수정-도전-그리고-pr&quot;&gt;버그 발견, 수정 도전, 그리고 PR&lt;/h2&gt;

&lt;p&gt;이 블로그를 만들고 사용하면서 가장 큰 문제 중 하나는 원하는 글을 검색할 수 없다는 것이었다.&lt;br /&gt;
그래서 검색 기능을 넣고자 알아보던 중에
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search&quot; target=&quot;_blank&quot;&gt;Simple-Jekyll-Search&lt;/a&gt;를
알게 되었고, 그것이 내가 원하는 검색 기능에 어느 정도 부합하다는 생각이 들어 적용 하기로 마음 먹었다.&lt;br /&gt;
그리고 이 라이브러리의 예제 수준으로만 검색 기능을 적용하기에는 원하는 퀄리티가 나오지 않아 커스터마이징 작업도 진행하기로 했다.&lt;/p&gt;

&lt;p&gt;그렇게 작업을 진행하던 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;exclude&lt;/code&gt; 옵션을 적용해보다가 전혀 작동하지 않는 현상을 발견했다.&lt;br /&gt;
그것을 보고 갑자기 삘(?)을 받아 처음에는 의도치 않았지만, 해당 라이브러리의 소스를 분석하기 시작했다.&lt;/p&gt;

&lt;p&gt;해당 소스의 주 언어는 JavaScript였고, 많이 사용해 본 경험이 없어 낯설었지만 재밌겠다는 생각에 분석을 진행했다.&lt;br /&gt;
검색해가며 소스 분석을 하다 보니 아주 치명적인 버그를 발견할 수 있었다.&lt;br /&gt;
검색 기능 관련 객체를 생성하는 코드에서 전달한 &lt;code class=&quot;highlighter-rouge&quot;&gt;exclude&lt;/code&gt; 옵션을 세팅하지 않는 것이었다.&lt;/p&gt;

&lt;p&gt;다행히 소스의 덩치가 크지 않아 분석하는 것이 크게 어렵지 않았고,
버그를 수정해서 Simple-Jekyll-Search 라이브러리에
&lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/pull/162&quot; target=&quot;_blank&quot;&gt;Pull Request(PR)&lt;/a&gt;을 보냈다.&lt;br /&gt;
최근까지도 Merge된 흔적이 있는 것을 보니 활동하고 있는 프로젝트라 생각이 들었다.&lt;br /&gt;
부디 나의 PR을 받아 들여 Merge되면 좋을 것 같다. 🥺&lt;/p&gt;

&lt;h2 id=&quot;오픈-소스-기여&quot;&gt;오픈 소스 기여&lt;/h2&gt;

&lt;p&gt;Open Source Software(이하 OSS)에 기여하는 것은 항상 어려운 일이라고만 생각이 들었는데, 생각보다 쉬운 일이었다.
물론, 시작은 쉽지만 Merge 되는 것은 어려울 수 있다.&lt;br /&gt;
시작이 반이라는 말처럼 일단 시작하는 것에 큰 의의를 두려고 한다.&lt;/p&gt;

&lt;p&gt;또한, 나와 다른 사고와 스타일을 가진 개발자의 코드를 보니 신기하고 재밌었다.&lt;br /&gt;
내 코드도 GitHub을 통해 공개되기도 하니 코드 퀄리티에 더 신경 써야겠다는 생각이 재차 들었다.&lt;/p&gt;

&lt;p&gt;OSS들을 보다 보면 생각보다 작은 덩치도 많고, 그런 프로젝트는 진입 장벽도 높지 않으니 자주 시도해보는 것이 좋을 것 같다.
이것이 쌓이면, 큰 프로젝트에 기여하는 것도 불가능한 일은 아닐 것 같다.&lt;br /&gt;
기여한 OSS가 많아지면 그 뿌듯함도 점점 쌓여가지 않을까? 🙂&lt;/p&gt;

&lt;h2 id=&quot;20201227-내용-추가&quot;&gt;2020.12.27 내용 추가&lt;/h2&gt;

&lt;p&gt;해당 &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search/pull/162&quot; target=&quot;_blank&quot;&gt;PR&lt;/a&gt;의
Merge가 받아들여졌다!&lt;br /&gt;
매우 뿌듯하고, 해당 프로젝트를 더 발전시키고 싶은 욕심이 생긴다.&lt;br /&gt;
불편했던 기능이 하나 있는데… 그것도 바꿔볼까? 🔥&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="oss" /><category term="jekyll" /><category term="javascript" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 18: 자잘한 안드로이드 UI 팁들 2</title><link href="https://jamesu.dev/posts/2020/06/15/til-18-some-android-ui-tips-2/" rel="alternate" type="text/html" title="TIL 18: 자잘한 안드로이드 UI 팁들 2" /><published>2020-06-15T00:00:00+09:00</published><updated>2020-06-15T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/06/15/til-18-some-android-ui-tips-2</id><content type="html" xml:base="https://jamesu.dev/posts/2020/06/15/til-18-some-android-ui-tips-2/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;코드로 &lt;code class=&quot;highlighter-rouge&quot;&gt;inflate&lt;/code&gt; 할 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 매개변수로 전달한 인자에 따른 주의사항&lt;/li&gt;
  &lt;li&gt;코드로 &lt;code class=&quot;highlighter-rouge&quot;&gt;inflate&lt;/code&gt; 할 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;이 적용되지 않는 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt; 자식으로 스크롤 뷰 형태의 뷰가 있을 때, 이중 스크롤을 방지하고 싶은 경우&lt;/li&gt;
  &lt;li&gt;클릭을 빠르게 두 번 했을 때, 이벤트가 두 번 발생하는 것을 방지하고 싶은 경우&lt;/li&gt;
  &lt;li&gt;코드로 높이, 너비 등과 같은 값을 설정하는 경우&lt;/li&gt;
  &lt;li&gt;뷰의 변환을 지속적으로 감지하고 싶은 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConstraintLayout&lt;/code&gt; 사용 시, 고정 높이가 적용되지 않는 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ellipsize&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;middle&lt;/code&gt;로 적용하는 경우 주의사항&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;자잘한-안드로이드-ui-팁들-2&quot;&gt;자잘한 안드로이드 UI 팁들 2&lt;/h2&gt;

&lt;p&gt;유지보수를 하며 추가적으로 간단하게 정리했던 팁들이다.&lt;br /&gt;
앞서 작성했던 팁들은 바로 이전 글에서 확인할 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;1-코드로-inflate-할-때-root-매개변수로-전달한-인자에-따른-동작-구분&quot;&gt;1. 코드로 &lt;code class=&quot;highlighter-rouge&quot;&gt;inflate&lt;/code&gt; 할 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 매개변수로 전달한 인자에 따른 동작 구분&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 매개변수에 부모 뷰를 전달하면, 부모 뷰에 &lt;code class=&quot;highlighter-rouge&quot;&gt;addView()&lt;/code&gt; 메소드를 호출해 자식으로 추가되는 효과가 난다.
반대로, &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;을 전달하면 추가가 되지 않으므로 직접 추가를 해줘야 한다.&lt;/p&gt;

&lt;p&gt;때에 따라 부모 뷰를 전달할 필요가 없기도 한다.&lt;br /&gt;
그런데 두 경우에 반환한 뷰가 서로 달라 주의가 필요하다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;부모 뷰를 전달한 경우: &lt;strong&gt;부모 뷰&lt;/strong&gt;가 반환된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;을 전달한 경우: &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inflate&lt;/code&gt; 된 뷰&lt;/strong&gt;가 반환된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;2-코드로-inflate-할-때-margin이-적용되지-않는-경우&quot;&gt;2. 코드로 &lt;code class=&quot;highlighter-rouge&quot;&gt;inflate&lt;/code&gt; 할 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;이 적용되지 않는 경우&lt;/h3&gt;

&lt;p&gt;분명히 &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt; 레이아웃에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;을 적용했는데, &lt;code class=&quot;highlighter-rouge&quot;&gt;inflate&lt;/code&gt; 한 경우 실제로 적용되지 않는 것을 확인할 수 있다.
이 또한 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt; 매개변수에 부모 뷰를 전달했는지 안했는지에 따라 달라진다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;부모 뷰를 전달한 경우: &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;이 정상적으로 적용&lt;/strong&gt;된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;을 전달한 경우: &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;이 적용되지 않아 &lt;strong&gt;코드로 직접 적용해야 한다&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inflate&lt;/code&gt; 할 때 부모가 주어지면 &lt;code class=&quot;highlighter-rouge&quot;&gt;margin&lt;/code&gt;을 판단할 수 있으나, 없다면 판단할 수 없어 발생하는 문제인 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;3-scrollview-자식으로-스크롤-뷰-형태의-뷰가-있을-때-이중-스크롤을-방지하고-싶은-경우&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt; 자식으로 스크롤 뷰 형태의 뷰가 있을 때, 이중 스크롤을 방지하고 싶은 경우&lt;/h3&gt;

&lt;p&gt;스크롤 뷰 형태의 뷰라 하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ListView&lt;/code&gt; 등 스크롤이 생길 수 있는 뷰를 말한다.
해당 뷰를 이용해서 데이터를 표현했지만, 높이를 고정시키고 싶을 때가 있을 것이다.
그런데 부모로 &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt;를 그냥 사용하면, 고정 높이가 적용되지 않을 수가 있다.&lt;/p&gt;

&lt;p&gt;부모에 해당하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt; 대신 &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NestedScrollView&lt;/code&gt;를 사용&lt;/strong&gt;한다.&lt;br /&gt;
자식으로 스크롤 뷰 형태의 뷰를 가지면, 그냥 &lt;code class=&quot;highlighter-rouge&quot;&gt;NestedScrollView&lt;/code&gt;를 사용하는 것이 속 편할 것 같다.&lt;br /&gt;
아니면 항상 &lt;code class=&quot;highlighter-rouge&quot;&gt;ScrollView&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;NestedScrollView&lt;/code&gt;를 사용하는 것도…&lt;/p&gt;

&lt;h3 id=&quot;4-클릭을-빠르게-두-번-했을-때-이벤트가-두-번-발생하는-것을-방지하고-싶은-경우&quot;&gt;4. 클릭을 빠르게 두 번 했을 때, 이벤트가 두 번 발생하는 것을 방지하고 싶은 경우&lt;/h3&gt;

&lt;p&gt;클릭 이벤트에서 마지막으로 클릭한 시간을 기록했다가 현재 시간과 비교해 간격을 줄 수 있다.&lt;/p&gt;

&lt;p&gt;아래와 같은 코드를 클릭 이벤트에 넣어 구현이 가능하다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elapsedRealtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLastClickTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mLastClickTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;elapsedRealtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;하지만, 이것도 정말 빠르게 두 번 누르면 같은 현상이 발생한다…&lt;br /&gt;
추가적으로 다른 조치가 필요할 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;5-코드로-높이-너비-등과-같은-값을-설정하는-경우&quot;&gt;5. 코드로 높이, 너비 등과 같은 값을 설정하는 경우&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;코드로 해당 값들을 설정하는 메소드는 대부분 &lt;code class=&quot;highlighter-rouge&quot;&gt;px&lt;/code&gt; 값을 수치로 전달 받는다.&lt;/strong&gt;&lt;br /&gt;
만약, 디자인을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;dp&lt;/code&gt; 값 설정이 필요하다면, 반드시 변환해서 전달하도록 한다.&lt;/p&gt;

&lt;p&gt;일반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;dpToPx()&lt;/code&gt;와 같은 유틸 메소드를 만들어 사용하곤 한다.&lt;/p&gt;

&lt;h3 id=&quot;6-뷰의-변환을-지속적으로-감지하고-싶은-경우&quot;&gt;6. 뷰의 변환을 지속적으로 감지하고 싶은 경우&lt;/h3&gt;

&lt;p&gt;뷰의 &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewTreeObserver&lt;/code&gt;를 얻어 &lt;code class=&quot;highlighter-rouge&quot;&gt;OnGlobalLayoutListener&lt;/code&gt;를 설정하면 지속적 감지가 가능하다.
하지만, 매우 자주 호출되므로 주의가 필요하다.&lt;/p&gt;

&lt;p&gt;일회성 동작이라면, &lt;code class=&quot;highlighter-rouge&quot;&gt;GlobalLayout&lt;/code&gt; 이벤트에서 해당 리스너를 지우도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;7-constraintlayout-사용-시-고정-높이가-적용되지-않는-경우&quot;&gt;7. &lt;code class=&quot;highlighter-rouge&quot;&gt;ConstraintLayout&lt;/code&gt; 사용 시, 고정 높이가 적용되지 않는 경우&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;layout_constrainedHeight&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;로 설정한다.&lt;/p&gt;

&lt;h3 id=&quot;8-ellipsize를-middle로-적용하는-경우-주의사항&quot;&gt;8. &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipsize&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;middle&lt;/code&gt;로 적용하는 경우 주의사항&lt;/h3&gt;

&lt;p&gt;줄 수를 2줄 이상으로 허용하는 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;ellipsize&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;middle&lt;/code&gt;이면 경우에 따라 크래시가 발생할 수 있다.
따라서 2줄 이상인 경우에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;middle&lt;/code&gt; 값을 사용하지 않고, &lt;code class=&quot;highlighter-rouge&quot;&gt;end&lt;/code&gt;와 같은 다른 값을 사용해야 한다.&lt;/p&gt;

&lt;p&gt;1줄인 경우에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;middle&lt;/code&gt; 값을 사용하는 것에 문제가 없다.&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="android" /><category term="ui" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 17: 자잘한 안드로이드 UI 팁들</title><link href="https://jamesu.dev/posts/2020/06/09/til-17-some-android-ui-tips/" rel="alternate" type="text/html" title="TIL 17: 자잘한 안드로이드 UI 팁들" /><published>2020-06-09T00:00:00+09:00</published><updated>2020-06-09T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/06/09/til-17-some-android-ui-tips</id><content type="html" xml:base="https://jamesu.dev/posts/2020/06/09/til-17-some-android-ui-tips/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt; 항목들이 서로 잘리지 않게 하고 싶은 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DrawerLayout&lt;/code&gt;로 사이드 화면을 열었을 때, 뒤의 컨텐츠 부분이 클릭되는 경우&lt;/li&gt;
  &lt;li&gt;버튼의 그림자를 제거하고 싶은 경우&lt;/li&gt;
  &lt;li&gt;이미지를 너비는 꽉 채우되, 비율에 따라 높이를 동적으로 설정하고 싶은 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewPager&lt;/code&gt;를 빠르게 스크롤 할 때, 흰 배경이 보이는 경우&lt;/li&gt;
  &lt;li&gt;상태바 높이를 얻고 싶은 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bottom Sheet Dialog&lt;/code&gt;의 드래그 동작을 막고 싶은 경우&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;EditText&lt;/code&gt; 내부 스크롤을 활성화하고 싶은 경우&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;자잘한-안드로이드-ui-팁들&quot;&gt;자잘한 안드로이드 UI 팁들&lt;/h2&gt;

&lt;p&gt;안드로이드 개발을 하면서 느끼는 점은 iOS 개발도 불편한 부분이 많았지만, 안드로이드는 더 심한 것처럼 느껴진다.
정말 쉽게 처리될 것 같은 부분도 직접 해보면 편법인지 아닌지도 모르겠는 편법같은 처리를 해야 되는 부분도 있고 해서 참으로 힘들다.
그래서 이런 자잘한 처리들을 모아 라이브러리를 만들어 두고두고 쓰면 좋을 것 같다는 생각이 들었다.
언제 만들지는 모르지만…&lt;/p&gt;

&lt;h3 id=&quot;1-recyclerview-항목들이-서로-잘리지-않게-하고-싶은-경우&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt; 항목들이 서로 잘리지 않게 하고 싶은 경우&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;clipChildren&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;로 설정한다.&lt;br /&gt;
그러면, 자식들이 서로 자르지 않는다.&lt;/p&gt;

&lt;h3 id=&quot;2-drawerlayout로-사이드-화면을-열었을-때-뒤의-컨텐츠-부분이-클릭되는-경우&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;DrawerLayout&lt;/code&gt;로 사이드 화면을 열었을 때, 뒤의 컨텐츠 부분이 클릭되는 경우&lt;/h3&gt;

&lt;p&gt;사이드 화면의 레이아웃에 &lt;code class=&quot;highlighter-rouge&quot;&gt;clickable&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;focusable&lt;/code&gt;을 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;로 설정한다.&lt;br /&gt;
사이드 화면이 클릭 가능하게 함으로써 막는다.&lt;/p&gt;

&lt;h3 id=&quot;3-버튼의-그림자를-제거하고-싶은-경우&quot;&gt;3. 버튼의 그림자를 제거하고 싶은 경우&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;stateListAnimator&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;@null&lt;/code&gt;로 설정한다.&lt;/p&gt;

&lt;h3 id=&quot;4-이미지를-너비는-꽉-채우되-비율에-따라-높이를-동적으로-설정하고-싶은-경우&quot;&gt;4. 이미지를 너비는 꽉 채우되, 비율에 따라 높이를 동적으로 설정하고 싶은 경우&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;adjustViewBounds&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;로, 너비를 &lt;code class=&quot;highlighter-rouge&quot;&gt;match_parent&lt;/code&gt;로 설정한다.&lt;br /&gt;
반대의 경우는 너비와 높이를 바꿔 생각하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;5-viewpager를-빠르게-스크롤-할-때-흰-배경이-보이는-경우&quot;&gt;5. &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewPager&lt;/code&gt;를 빠르게 스크롤 할 때, 흰 배경이 보이는 경우&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewPager&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;offscreenPageLimit&lt;/code&gt;를 적절하게 설정해 페이지를 미리 로딩하도록 한다.&lt;br /&gt;
복잡한 뷰일수록 수치를 낮게 설정해야 과부하가 걸리지 않는다.&lt;/p&gt;

&lt;h3 id=&quot;6-상태바-높이를-얻고-싶은-경우&quot;&gt;6. 상태바 높이를 얻고 싶은 경우&lt;/h3&gt;

&lt;p&gt;상태바 높이에 해당하는 리소스를 찾아내 구할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStatusBarHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Resources&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getIdentifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;status_bar_height&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;dimen&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;android&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDimensionPixelSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resourceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;7-bottom-sheet-dialog의-드래그-동작을-막고-싶은-경우&quot;&gt;7. &lt;code class=&quot;highlighter-rouge&quot;&gt;Bottom Sheet Dialog&lt;/code&gt;의 드래그 동작을 막고 싶은 경우&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BottomSheetBehavior&lt;/code&gt;에 다음과 같은 콜백을 추가한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addBottomSheetCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BottomSheetBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;BottomSheetCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStateChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottomSheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BottomSheetBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STATE_DRAGGING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;behavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BottomSheetBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;STATE_EXPANDED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onSlide&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@NonNull&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bottomSheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slideOffset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;8-edittext-내부-스크롤을-활성화하고-싶은-경우&quot;&gt;8. &lt;code class=&quot;highlighter-rouge&quot;&gt;EditText&lt;/code&gt; 내부 스크롤을 활성화하고 싶은 경우&lt;/h3&gt;

&lt;p&gt;다음과 같은 터치 리스너를 추가한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;editText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnTouchListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;editText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hasFocus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestDisallowInterceptTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_MASK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MotionEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACTION_SCROLL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestDisallowInterceptTouchEvent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="android" /><category term="ui" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 16: 레거시 시스템은 지옥</title><link href="https://jamesu.dev/posts/2020/06/05/til-16-legacy-system-is-hell/" rel="alternate" type="text/html" title="TIL 16: 레거시 시스템은 지옥" /><published>2020-06-05T00:00:00+09:00</published><updated>2020-06-05T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/06/05/til-16-legacy-system-is-hell</id><content type="html" xml:base="https://jamesu.dev/posts/2020/06/05/til-16-legacy-system-is-hell/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;레거시 시스템은 가능하면 빨리 개선해서 지옥을 맞이하지 않도록 하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;뉴저지-코볼cobol-사건으로-느껴지는-레거시-시스템의-폐해&quot;&gt;뉴저지 코볼(COBOL) 사건으로 느껴지는 레거시 시스템의 폐해&lt;/h2&gt;

&lt;p&gt;노마드 코더는 즐겨보는 유튜버 중 한명으로 다양한 프로그래밍 관련 이야기를 해준다.&lt;br /&gt;
가끔씩 재밌는 이슈도 이야기 해주는데, 이번에 들려준 이슈는 &lt;strong&gt;코볼(COBOL) 레거시 시스템에서 얻는 교훈&lt;/strong&gt;에 관한 것이었다.
(&lt;a href=&quot;https://youtu.be/LJ9TXkh9Xhk&quot; target=&quot;_blank&quot;&gt;유튜브 영상 링크&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;간단히 요약하자면,
미국 뉴저지 정부의 전산 시스템이 비교적 오래된 언어인 코볼로 이뤄져 있는 레거시 시스템인데, 개발자를 구할 수 없다는 것이다.
이번 코로나19 사태로 전산 시스템에 유래 없이 많은 사용자가 몰리게 되었고,
그것의 유지보수를 위해 코볼 개발자를 급하게 구하고 있지만 공급이 없어 애를 먹는 상황이다.&lt;/p&gt;

&lt;p&gt;오래된 언어답게 요즘 자주 사용하는 언어에 비하면 생산성도 떨어지고, 여러모로 단점이 많다.
이렇게 오랫동안 지속된 레거시 시스템은 진작에 시간을 두어 개편 작업을 해야 마땅한데 &lt;strong&gt;현업에서도 우선순위에서 밀리는 경우가 많다&lt;/strong&gt;.&lt;br /&gt;
이처럼 뉴저지 코볼 사건은 레거시 시스템이 낳은 안타까운 결과물 중 하나이다.&lt;/p&gt;

&lt;p&gt;비슷하게 (어디에나 존재할 수 있지만) 재직중인 회사에도 레거시 시스템이 존재한다.
그것의 구조적 한계로 인해 일부 유용한 개선도 못하고 있는 것이 보인다.&lt;br /&gt;
또한, 내가 맡고 있는 iOS 앱들도 불필요하게 Objective-C에 MRC 환경으로 되어 있다.
이런 환경일수록 더 디테일하게 다뤄야 하는데 그러지 못해 버그와 메모리 누수가 산발한다.&lt;/p&gt;

&lt;p&gt;뉴저지 코볼 사건처럼 나중에 후회하지 않으려면 &lt;strong&gt;일부 시간을 내서라도 구조, 환경 등의 개편을 진행해야 한다고 생각한다&lt;/strong&gt;.
그렇게 하나의 앱은 한달의 시간을 어떻게든 내어 Objective-C에서 Swift로 포팅을 진행했고, 여러모로 만족하고 있다.&lt;/p&gt;

&lt;p&gt;앞으로도 기회가 조금이라도 보이면, 기회를 만들어 기존 앱들의 포팅을 진행하거나 효율적인 구조로 개편하는 작업을 하고 싶다.
야근은 자제하면서 말이다.. 😇&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="idea" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 15: Notion은 유용해</title><link href="https://jamesu.dev/posts/2020/05/31/til-15-notion-is-useful/" rel="alternate" type="text/html" title="TIL 15: Notion은 유용해" /><published>2020-05-31T00:00:00+09:00</published><updated>2020-05-31T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/05/31/til-15-notion-is-useful</id><content type="html" xml:base="https://jamesu.dev/posts/2020/05/31/til-15-notion-is-useful/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.notion.so&quot; target=&quot;_blank&quot;&gt;Notion&lt;/a&gt; 툴은 개발자를 위한 &lt;strong&gt;메모 및 글 관리&lt;/strong&gt;에 유용하다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;개발자를-위한-메모-및-글-관리-툴&quot;&gt;개발자를 위한 메모 및 글 관리 툴&lt;/h2&gt;

&lt;p&gt;개발을 하다보면 Code Snippet, 유용한 링크, 메모 등을 빠르게 작성하고, 보관하고 싶을 것이다.&lt;br /&gt;
&lt;a href=&quot;https://www.notion.so&quot; target=&quot;_blank&quot;&gt;Notion&lt;/a&gt;을 사용하면, 그 욕구를 잘 해소할 수 있다.&lt;/p&gt;

&lt;p&gt;이전에는 맥북에 내장되어 있는 메모 앱을 자주 사용하곤 했는데, 내용이 필요할 때마다 애플 계정 동기화 또는 로그인이 필요했다.
그래서 어디서든 빠르게 접근할 수 있는 메모가 필요했고, 우연히 웹 툴인 Notion을 접하게 되었다.&lt;/p&gt;

&lt;p&gt;이걸 왜 이제 알았는지 모르겠다.&lt;br /&gt;
간단하고 편리하고 개발자가 쓰기 좋은 기능들도 꽤 있다.&lt;br /&gt;
게다가 디자인이 내 취향이다. 😀&lt;/p&gt;

&lt;p&gt;한 문단과 비슷한 블록이라는 단위로 작성 단위를 측정하고 있다.&lt;br /&gt;
그것과 업로드 용량 등 여러 요소에 따라 요금제가 달라진다.&lt;br /&gt;
기본적으로 무료로 제공되는 양도 괜찮기 때문에 일단 사용해보고 판단하길 바란다.&lt;/p&gt;

&lt;p&gt;홍보대사는 아니지만, 이런 유용한 툴을 나만 알고 싶지 않아서 공유한다.&lt;br /&gt;
그동안 모르고 있었다면, 나처럼 빠져들지도 모른다. 😍&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="tool" /><summary type="html">TL;DR</summary></entry></feed>