<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://jamesujeon.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jamesujeon.github.io/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2020-01-17T13:32:24+09:00</updated><id>https://jamesujeon.github.io/</id><title type="html">Jamesu Devlog</title><subtitle>Dev Blog by James Minsu Jeon</subtitle><author><name>jamesujeon</name><email>jamesujeon@gmail.com</email></author><entry><title type="html">Xcode 11에서 스토리보드와 SceneDelegate 없이 Swift 프로젝트 시작하기</title><link href="https://jamesujeon.github.io/posts/2020/01/16/starting-swift-project-without-storyboard-and-scenedelegate-in-xcode-11/" rel="alternate" type="text/html" title="Xcode 11에서 스토리보드와 SceneDelegate 없이 Swift 프로젝트 시작하기" /><published>2020-01-16T00:00:00+09:00</published><updated>2020-01-16T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2020/01/16/starting-swift-project-without-storyboard-and-scenedelegate-in-xcode-11</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2020/01/16/starting-swift-project-without-storyboard-and-scenedelegate-in-xcode-11/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;뷰를 구성하는 방법은 Code, Storyboard, NIB(XIB) 등 외에 최근에 추가된 SwiftUI까지 다양한 방법이 존재한다.
각 방법은 장단점이 존재해 어떤 것이 Best Practice라고 단정하기 어렵다.
프로젝트 상황에 맞춰 장단점을 고려해 적절히 선택해야 한다.&lt;/p&gt;

&lt;p&gt;여기서는 그 중에 &lt;strong&gt;Code 기반 프로젝트&lt;/strong&gt;를 시작하기 위해, Xcode에서 프로젝트를 생성하면 &lt;strong&gt;기본적으로 추가되는 스토리보드를 제거하는 방법&lt;/strong&gt;을 알려준다.&lt;/p&gt;

&lt;p&gt;추가적으로 &lt;strong&gt;Xcode 11&lt;/strong&gt;에서 새 프로젝트를 생성한다면, 처음 보는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneDelegate.swift&lt;/code&gt; 파일이 생겼을 것이다.
이는 &lt;strong&gt;iOS 13&lt;/strong&gt;을 위해 새로 생긴 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowSceneDelegate&lt;/code&gt; 프로토콜을 구현한 클래스로, &lt;strong&gt;Scene&lt;/strong&gt; 개념을 적용할 수 있게 해준다.
만약, 이전 버전처럼 Scene 개념을 적용할 필요가 없다면 굳이 필요하지 않은 부분이므로, &lt;strong&gt;SceneDelegate를 제거하는 방법&lt;/strong&gt;까지 알아보도록 하자.&lt;/p&gt;

&lt;p&gt;Scene 개념에 대해 더 자세히 알아보고 싶다면, 다음 링크들을 참고하길 바란다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/app_and_environment/managing_your_app_s_life_cycle&quot; target=&quot;_blank&quot;&gt;Managing Your App’s Life Cycle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/app_and_environment/scenes&quot; target=&quot;_blank&quot;&gt;Scenes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스토리보드-제거&quot;&gt;스토리보드 제거&lt;/h2&gt;

&lt;p&gt;스토리보드를 제거하기 위해선 프로젝트가 생성되면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt;와 연동된 부분을 끊으면 된다.&lt;/p&gt;

&lt;h3 id=&quot;1-프로젝트에서-main-스토리보드-설정을-제거한다-이때-프로젝트-설정을-이용하면-편리하다&quot;&gt;1. 프로젝트에서 Main 스토리보드 설정을 제거한다. 이때, 프로젝트 설정을 이용하면 편리하다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/figures/removing_storyboard/1_1.png&quot; alt=&quot;Removing Storyboard Step 1-1&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_storyboard/1_2.png&quot; alt=&quot;Removing Storyboard Step 1-2&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_storyboard/1_3.png&quot; alt=&quot;Removing Storyboard Step 1-3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 프로젝트 설정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Interface&lt;/code&gt; 항목의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt; 값을 지우면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;에도 반영된다.&lt;br /&gt;
만약, &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Main storyboard file base name&lt;/code&gt; 항목이 남아있다면, 제거하도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;2-xcode-11의-경우-infoplist의-scene-관련-항목에서-storyboard-name-항목을-제거한다&quot;&gt;2. Xcode 11의 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;의 Scene 관련 항목에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Storyboard Name&lt;/code&gt; 항목을 제거한다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/figures/removing_storyboard/2_1.png&quot; alt=&quot;Removing Storyboard Step 2-1&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_storyboard/2_2.png&quot; alt=&quot;Removing Storyboard Step 2-2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-mainstoryboard-파일을-삭제한다&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt; 파일을 삭제한다.&lt;/h3&gt;

&lt;p&gt;해당 파일은 더 이상 사용하지 않으므로 삭제하도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;4-viewcontroller의-기본-뷰에-배경색을-입히고-실행시켜-잘-뜨는지-확인한다&quot;&gt;4. &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;의 기본 뷰에 배경색을 입히고 실행시켜 잘 뜨는지 확인한다.&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;앱이 실행되면, 빨간색 배경이 보이는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;scenedelegate-제거&quot;&gt;SceneDelegate 제거&lt;/h2&gt;

&lt;p&gt;기존에 &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneDelegate&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindow&lt;/code&gt;를 설정하는 부분을 예전처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;로 옮기고, Scene 관련 파일과 설정을 제거하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;1-appdelegate에서-scene-관련-함수-정의부를-제거한다&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;에서 Scene 관련 함수 정의부를 제거한다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/figures/removing_scenedelegate/1_1.png&quot; alt=&quot;Removing SceneDelegate Step 1-1&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_scenedelegate/1_2.png&quot; alt=&quot;Removing SceneDelegate Step 1-2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-appdelegate에-uiwindow-설정-로직을-추가한다&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindow&lt;/code&gt; 설정 로직을 추가한다.&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SceneDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindowSceneDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;willConnectTo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UISceneSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConnectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// If using a storyboard, the `window` property will automatically be initialized and attached to the scene.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-infoplist에서-application-scene-manifest-항목을-통째로-제거한다&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Application Scene Manifest&lt;/code&gt; 항목을 통째로 제거한다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/figures/removing_scenedelegate/3_1.png&quot; alt=&quot;Removing SceneDelegate Step 3-1&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_scenedelegate/3_2.png&quot; alt=&quot;Removing SceneDelegate Step 3-2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-앱을-실행시켜-잘-뜨는지-확인한다&quot;&gt;4. 앱을 실행시켜 잘 뜨는지 확인한다.&lt;/h3&gt;

&lt;p&gt;앱이 잘 실행되면, 뿌듯한 미소를 짓는다. 🙂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="swift" /><category term="xcode" /><category term="storyboard" /><category term="scene" /><summary type="html">개요</summary></entry><entry><title type="html">백준 문제 풀이: 11727 - 2×n 타일링 2</title><link href="https://jamesujeon.github.io/posts/2020/01/14/baekjoon-problem-solving-11727/" rel="alternate" type="text/html" title="백준 문제 풀이: 11727 - 2×n 타일링 2" /><published>2020-01-14T00:00:00+09:00</published><updated>2020-01-14T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2020/01/14/baekjoon-problem-solving-11727</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2020/01/14/baekjoon-problem-solving-11727/">&lt;p&gt;&lt;img src=&quot;assets/baekjoon_11727.png&quot; alt=&quot;11727 - 2×n 타일링 2&quot; title=&quot;11727 - 2×n 타일링 2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11727&quot; target=&quot;_blank&quot;&gt;2×n 타일링 2 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2xn 직사각형을 채울 때, 2x1, 2x2 타일만 사용할 수 있으며, 2x1은 가로로 채울 수도, 세로로 채울 수도 있다.&lt;br /&gt;
또한, 사용한 개수에 상관없이 채운 모양에 따라 경우의 수가 결정되는 점을 주의해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;에 따라 반복되는 구조인 것을 확인할 수 있으므로, &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EA%B3%84%ED%9A%8D%EB%B2%95&quot; target=&quot;_blank&quot;&gt;동적 계획법(Dynamic Programming)&lt;/a&gt;을 사용하도록 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;이 작을 때부터 차례대로 구해가며, 최종적으로 입력한 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;에 대한 방법의 수를 구할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;일단, 필요한 초기값을 생각해보면, 1개의 타일로 채울 수 있는 최대의 너비는 2이므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;이 1일 때와 2일 때의 값은 구해야 한다.
이 경우, 방법의 수가 매우 적으므로 직접 구할 수 있다.&lt;/p&gt;

&lt;p&gt;구한 방법의 수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;counts&lt;/code&gt;에 담는다고 하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;counts[1] = 1, counts[2] = 3&lt;/code&gt;이 된다.&lt;/p&gt;

&lt;p&gt;이제 임의의 수 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;에 대한 경우의 수, &lt;code class=&quot;highlighter-rouge&quot;&gt;counts[n]&lt;/code&gt;을 생각해보자.&lt;br /&gt;
다음과 같이 직사각형의 맨 앞부분에 최소의 타일만 사용해 채워보면, &lt;strong&gt;나머지는 부분에 대한 경우의 수&lt;/strong&gt;인 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서, 점화식 &lt;code class=&quot;highlighter-rouge&quot;&gt;counts[n] = counts[n - 1] + counts[n - 2] * 2&lt;/code&gt;를 구할 수 있다.&lt;/p&gt;

&lt;p&gt;이처럼 동적 계획법에서는 &lt;strong&gt;반복되는 규칙&lt;/strong&gt;을 찾아내는 눈을 기르는 게 중요한 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="baekjoon" /><category term="dynamic-programming" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">백준 문제 풀이: 2156 - 포도주 시식</title><link href="https://jamesujeon.github.io/posts/2020/01/10/baekjoon-problem-solving-2156/" rel="alternate" type="text/html" title="백준 문제 풀이: 2156 - 포도주 시식" /><published>2020-01-10T00:00:00+09:00</published><updated>2020-01-10T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2020/01/10/baekjoon-problem-solving-2156</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2020/01/10/baekjoon-problem-solving-2156/">&lt;p&gt;&lt;img src=&quot;assets/baekjoon_2156.png&quot; alt=&quot;2156 - 포도주 시식&quot; title=&quot;2156 - 포도주 시식&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2156&quot; target=&quot;_blank&quot;&gt;포도주 시식 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;연속으로 3잔을 선택하지 않고, 마신 포도주 양이 최대가 되도록 포도주 잔을 선택했을 때, 포도주 양을 구하는 문제이다.&lt;br /&gt;
연속 1잔, 2잔까지는 허용하도록 선택하는 것에 유의해 문제를 푼다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EA%B3%84%ED%9A%8D%EB%B2%95&quot; target=&quot;_blank&quot;&gt;동적 계획법(Dynamic Programming)&lt;/a&gt;을 이용해 포도주의 잔이 적을 때부터 단계적으로 풀어나가면 된다.&lt;br /&gt;
여기서 핵심은 작은 문제에서 어떠한 값들을 기록하며 최종 문제에 도달할 것인지이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;번째에서 구한 최대 포도주 양을 &lt;code class=&quot;highlighter-rouge&quot;&gt;max_amount(i)&lt;/code&gt;라 하면, 포도주가 한 잔 추가됐을 때의 최대 포도주 양을 어떻게 구할지 생각해봐야 한다.
일단, 경우의 수가 어떤 것이 있는지 알아보자.&lt;/p&gt;

&lt;p&gt;이 문제에서 가장 중요한 규칙은 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;연속으로 놓여 있는 3잔을 모두 마실 수는 없다.&quot;&lt;/code&gt;이다.&lt;br /&gt;
이 말은 즉, 연속으로 잔이 놓이지 않도록 경우를 나눠 생각해볼 수 있다.&lt;br /&gt;
이를 &lt;strong&gt;마지막에 연속으로 마신 잔의 수&lt;/strong&gt;에 의한 기준으로 다음과 같이 경우를 나눌 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;일 때: &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;번째 포도주는 마시지 않으므로, &lt;strong&gt;이전의 최대 포도주 양&lt;/strong&gt;에 해당한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;일 때: &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;번째 포도주는 마시고, &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1)&lt;/code&gt;번째 포도주는 마시지 않으므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1)&lt;/code&gt;번째에 &lt;strong&gt;마지막에 연속으로 마신 잔의 수가 0일 때&lt;/strong&gt;의 최대 포도주 양에 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;번째 포도주 양을 더한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;일 때: &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1)&lt;/code&gt;번째 포도주를 모두 마시므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1)&lt;/code&gt;번째에 &lt;strong&gt;마지막에 연속으로 마신 잔의 수가 1일 때&lt;/strong&gt;의 최대 포도주 양에 &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;번째 포도주 양을 더한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기서 주의할 점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;의 경우에서 &lt;strong&gt;이전의 최대 포도주 양&lt;/strong&gt;을 구할 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1)&lt;/code&gt;번째 &lt;strong&gt;최대 포도주 양 중의 최대값&lt;/strong&gt;을 구해야 한다는 것이다.
왜냐하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;번째 포도주를 마시지 않으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;(i - 1)&lt;/code&gt;번째의 마지막에 연속으로 마신 잔의 수는 무관하기 때문이다.
몇 잔을 마시든 최대 포도주 양만 구하면 된다.&lt;/p&gt;

&lt;p&gt;이런 식으로 &lt;strong&gt;마지막에 연속으로 마신 잔의 수에 따른 최대 포도주 양&lt;/strong&gt;을 잔의 수에 따라 기록한다.&lt;br /&gt;
최종적으로 마지막 잔에 대해 최대 포도주 양을 구하고, 그 때의 최대 포도주 양 중의 최대값이 정답이 된다.&lt;/p&gt;

&lt;h3 id=&quot;python-입력-방식에-따른-수행-속도-차이&quot;&gt;Python 입력 방식에 따른 수행 속도 차이&lt;/h3&gt;

&lt;p&gt;기존에 하던 방식대로 &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; 함수를 이용해 입력을 처리했더니, &lt;code class=&quot;highlighter-rouge&quot;&gt;약 436ms&lt;/code&gt;의 속도가 나왔다.
그런데 다른 사람의 수행 속도는 &lt;code class=&quot;highlighter-rouge&quot;&gt;64ms&lt;/code&gt;로 큰 차이가 있었다.
로직의 차이가 있는지 알았으나 큰 차이가 없었다.&lt;/p&gt;

&lt;p&gt;검색 끝에 알게된 사실은 Python으로 알고리즘 풀이를 할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; 함수 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;sys&lt;/code&gt; 모듈의 &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.stdin&lt;/code&gt; 객체를 이용해야 속도가 향상된다는 것이다.
실제로 &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.stdin&lt;/code&gt; 객체를 이용해 똑같은 로직을 적용하니, 다른 사람과 동일하게 &lt;code class=&quot;highlighter-rouge&quot;&gt;64ms&lt;/code&gt;의 속도가 나왔다.
이는 &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; 함수와 &lt;code class=&quot;highlighter-rouge&quot;&gt;sys&lt;/code&gt; 모듈의 입력 함수들의 로직에 차이가 존재하기 때문인 것 같다.
(자세한 내용은 다양한 의견이 있으므로, 검색을 통해 공부하는 것이 좋을 것 같다.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sys.stdin&lt;/code&gt; 객체는 파일의 끝까지 한 번에 입력받는 방식이다.
CLI에서 입력을 완료하기 위해서 마지막에 &lt;code class=&quot;highlighter-rouge&quot;&gt;EOF(End Of File)&lt;/code&gt; 문자 입력이 필요하다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Control(Ctrl) + D&lt;/code&gt; 키로 입력할 수 있다.&lt;br /&gt;
한 줄씩 입력한다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.stdin.readline()&lt;/code&gt; 함수를 사용하면 된다. 이때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;EOF&lt;/code&gt; 문자를 입력할 필요가 없다.&lt;/p&gt;

&lt;p&gt;이 문제에서는 첫 줄에 입력받는 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;은 필요하지 않아, 간단히 &lt;code class=&quot;highlighter-rouge&quot;&gt;input()&lt;/code&gt; 함수를 통해 버리도록 했다.&lt;br /&gt;
또한, &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.stdin&lt;/code&gt; 객체를 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 문에 바로 사용하거나, &lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt; 함수로 바로 맵핑할 수도 있다.&lt;br /&gt;
이때, 한 줄마다 &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; 문 로직이 실행된다는 점과 &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.stdin&lt;/code&gt; 객체를 통해 반환되는 각 문자열은 &lt;strong&gt;개행 문자&lt;/strong&gt;를 제거하지 않는다는 점에 주의하도록 한다.&lt;/p&gt;

&lt;p&gt;다음과 같이 입력받은 대로 출력하는 코드를 실행시켜보면, 개행 문자가 포함되어 있는 것을 확인할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;결과를 보면, 3, 6번째 줄에 개행 문자가 포함되어 있어, 개행이 한 번 더 일어난다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Hello
Hello

World!
World!
 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;amounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;max_amounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;max_amounts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_amounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max_amounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max_amounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amount&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_amounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="baekjoon" /><category term="dynamic-programming" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">백준 문제 풀이: 2193 - 이친수</title><link href="https://jamesujeon.github.io/posts/2020/01/09/baekjoon-problem-solving-2193/" rel="alternate" type="text/html" title="백준 문제 풀이: 2193 - 이친수" /><published>2020-01-09T00:00:00+09:00</published><updated>2020-01-09T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2020/01/09/baekjoon-problem-solving-2193</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2020/01/09/baekjoon-problem-solving-2193/">&lt;p&gt;&lt;img src=&quot;assets/baekjoon_2193.png&quot; alt=&quot;2193 - 이친수&quot; title=&quot;2193 - 이친수&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/2193&quot; target=&quot;_blank&quot;&gt;이친수 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;이친수의 성질에 유의해 개수를 구하도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;이친수의 개수를 구하기 위해 모든 이진수에 대해 해당 성질을 만족하는지 검사를 하게 되면, 정말 많은 시간이 걸릴 수 있다.
따라서, 다른 방법을 생각해내야 하는데, 몇 가지 예시를 분석해보니 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EA%B3%84%ED%9A%8D%EB%B2%95&quot; target=&quot;_blank&quot;&gt;동적 계획법(Dynamic Programming)&lt;/a&gt;을 적용할 수 있었다.&lt;/p&gt;

&lt;p&gt;주어진 입력이 5인 경우를 예로 들어 모든 경우를 찾아보면 다음과 같다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;100000 100001 100010 100100 100101 101000 101001 101010&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이 중 &lt;code class=&quot;highlighter-rouge&quot;&gt;100000 100001 100010 100100 100101&lt;/code&gt;은 입력이 4인 경우의 수와 같다.&lt;br /&gt;
그 이유는 앞에서 세번째 수가 0이라 했을 때(&lt;code class=&quot;highlighter-rouge&quot;&gt;100***&lt;/code&gt;), 입력이 4인 경우의 수(&lt;code class=&quot;highlighter-rouge&quot;&gt;10***&lt;/code&gt;)를 구하는 것과 같기 때문이다.&lt;/p&gt;

&lt;p&gt;비슷하게 나머지 &lt;code class=&quot;highlighter-rouge&quot;&gt;101000 101001 101010&lt;/code&gt;은 입력이 3인 경우의 수와 같다.&lt;br /&gt;
그 이유는 앞에서 세번째 수가 1이라 했을 때(네번째 수는 0만 가능하므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;1010**&lt;/code&gt;), 입력이 3인 경우의 수(&lt;code class=&quot;highlighter-rouge&quot;&gt;10**&lt;/code&gt;)를 구하는 것과 같기 때문이다.&lt;/p&gt;

&lt;p&gt;따라서, 입력 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;에 대한 이친수의 개수는 다음과 같은 공식을 구할 수 있다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;count(n) = count(n-1) + count(n-2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이렇게 재귀식이 구해지면, 동적 계획법으로 해결하기 적합하고, 그 구현 또한 쉬워진다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;이 &lt;code class=&quot;highlighter-rouge&quot;&gt;0 또는 1&lt;/code&gt;인 경우의 초기값을 구해놓고, &lt;code class=&quot;highlighter-rouge&quot;&gt;2&lt;/code&gt;부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;까지 증가시키며 이친수의 개수를 구하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="baekjoon" /><category term="dynamic-programming" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">백준 문제 풀이: 9095 - 1, 2, 3 더하기</title><link href="https://jamesujeon.github.io/posts/2020/01/07/baekjoon-problem-solving-9095/" rel="alternate" type="text/html" title="백준 문제 풀이: 9095 - 1, 2, 3 더하기" /><published>2020-01-07T00:00:00+09:00</published><updated>2020-01-07T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2020/01/07/baekjoon-problem-solving-9095</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2020/01/07/baekjoon-problem-solving-9095/">&lt;p&gt;&lt;img src=&quot;assets/baekjoon_9095.png&quot; alt=&quot;9095 - 1, 2, 3 더하기&quot; title=&quot;9095 - 1, 2, 3 더하기&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/9095&quot; target=&quot;_blank&quot;&gt;1, 2, 3 더하기 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;1, 2, 3의 합으로 나타내는 방법에는 순서가 다른 것도 다른 방법으로 취급한다.&lt;br /&gt;
또한, 수는 총 1개 이상이므로, 자기 자신만 존재하는 것도 하나의 방법으로 취급해야 함을 유의한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;입력된 정수가 커질수록 합으로 나타내는 경우의 수는 기하급수적으로 커진다.
또한, 그 방법을 수식으로 표현할 방법조차 아주 복잡하거나 불가능하다.
이때, 유용한 방법이 &lt;strong&gt;동적 계획법&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EA%B3%84%ED%9A%8D%EB%B2%95&quot; target=&quot;_blank&quot;&gt;동적 계획법(Dynamic Programming)&lt;/a&gt;은 큰 문제를 작은 문제로 쪼개어, 작은 문제의 해답을 이용해 큰 문제를 해결하는 방법이다.
이때, 작은 문제들의 해답으로 큰 문제의 해답을 구할 수 있는 반복 구조여야 적용이 가능하다.
또한, &lt;strong&gt;작은 문제들의 해답을 미리 저장하고, 동일한 해답이 다시 필요한 경우 재활용&lt;/strong&gt;함으로써, 속도를 최적화할 수 있다.&lt;/p&gt;

&lt;p&gt;주어진 문제가 동적 계획법을 이용할 수 있는지, 정수 4를 1, 2, 3의 합으로 나타내는 방법에 대한 예시를 분석해보자.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;맨 앞에 수를 하나 두면, &lt;strong&gt;나머지 부분은 주어진 수에 앞에 둔 수를 빼고 동일한 방법을 적용&lt;/strong&gt;해 구성할 수 있다.&lt;/li&gt;
  &lt;li&gt;맨 앞에 올 수 있는 수는 &lt;strong&gt;1, 2, 3의 3가지 수&lt;/strong&gt;뿐이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예시에 적용해보면, 다음과 같다.&lt;br /&gt;
맨 앞에 1이 있으면, 나머지 부분은 4에서 1을 뺀 3에 동일한 방법을 적용할 수 있다.&lt;br /&gt;
맨 앞에 3이 있으면, 나머지 부분은 4에서 3을 뺀 1에 동일한 방법을 적용할 수 있다.&lt;/p&gt;

&lt;p&gt;이는 &lt;strong&gt;동일한 문제가 작은 수에 대해 반복&lt;/strong&gt;적인 것을 알 수 있다.
주어진 수는 작은 수들의 문제로 쪼개지고, 그 작은 수들은 또 작은 수들의 문제로 쪼개지고, 결국은 최소에 해당하는 초기값까지 쪼개질 것이다.
우리는 초기값을 쉽게 구할 수 있으므로, 거꾸로 작은 수부터 해답을 찾아가면, 최종적으로 주어진 수의 해답을 구할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;이때, 구했던 작은 문제의 해답이 다른 문제에서 필요할 때 다시 구하게 되면, 시간 낭비가 되므로 &lt;strong&gt;해답을 저장해두고 재활용&lt;/strong&gt;하도록 한다.
이를 통해 반복적으로 계산하던 방식에 비해 &lt;strong&gt;빠른 속도 향상&lt;/strong&gt;을 이룰 수 있다.&lt;/p&gt;

&lt;p&gt;해답 저장을 위해서 &lt;strong&gt;해시 테이블&lt;/strong&gt;인 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt;를 이용한다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt;의 키로 구하려는 수를 이용하면, 해당 수(키)에 대한 즉각적인 값을 얻을 수 있으므로 아주 빠르게 얻을 수 있다.
이에 비해 &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;의 인덱스를 구하려는 수로 이용하면, 사용하지 않는 공간이 많이 낭비될 수 있다.&lt;/p&gt;

&lt;p&gt;주어진 수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;이라 하면, 합으로 나타내는 경우의 수 &lt;code class=&quot;highlighter-rouge&quot;&gt;count(n)&lt;/code&gt;는 맨 앞에 각각 1, 2, 3을 놓았을 때, 나머지 부분의 경우의 수들의 합이라 할 수 있다.
맨 앞에 1을 놓았을 때는 n에서 1을 뺀 나머지의 경우의 수이므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;count(n - 1)&lt;/code&gt;이고, 나머지 수에 대해서는 각각 &lt;code class=&quot;highlighter-rouge&quot;&gt;count(n - 2)&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;count(n - 3)&lt;/code&gt;가 된다.&lt;/p&gt;

&lt;p&gt;이것은, &lt;code class=&quot;highlighter-rouge&quot;&gt;count(n) = count(n - 1) + count(n - 2) + count(n - 3), n &amp;gt; 3&lt;/code&gt;와 같이 일반화할 수 있다.&lt;/p&gt;

&lt;p&gt;위의 식에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;은 3보다 커야, 주어진 수가 양수라는 조건에 맞게 해답을 구할 수 있다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;n &amp;lt;= 3&lt;/code&gt;인 1, 2, 3인 경우는 직접 구해서 미리 저장해 이용하도록 한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n &amp;lt;= 3&lt;/code&gt;인 경우에 대해서, &lt;code class=&quot;highlighter-rouge&quot;&gt;count(1) = 1, count(2) = 2, count(3) = 4&lt;/code&gt;와 같이 구할 수 있다.&lt;/p&gt;

&lt;p&gt;동적 계획법 문제는 반복 구조이므로 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%9E%AC%EA%B7%80_(%EC%BB%B4%ED%93%A8%ED%84%B0_%EA%B3%BC%ED%95%99)&quot; target=&quot;_blank&quot;&gt;재귀 함수&lt;/a&gt;를 통해 일반식을 쉽게 구현할 수 있다.
이때, &lt;strong&gt;해답을 저장하는 처리와 이미 해답이 존재하는 경우 그대로 반환하는 처리를 잊지 말자&lt;/strong&gt;.
그렇지 않으면, 무한 재귀 호출이 되어 프로그램이 종료되는 것을 경험할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="baekjoon" /><category term="dynamic-programming" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">Jekyll에 Disqus 댓글 서비스 연동하기</title><link href="https://jamesujeon.github.io/posts/2020/01/03/adding-disqus-comment-service-to-jekyll/" rel="alternate" type="text/html" title="Jekyll에 Disqus 댓글 서비스 연동하기" /><published>2020-01-03T00:00:00+09:00</published><updated>2020-01-03T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2020/01/03/adding-disqus-comment-service-to-jekyll</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2020/01/03/adding-disqus-comment-service-to-jekyll/">&lt;h2 id=&quot;별도의-댓글-서비스를-이용해야-하는-이유&quot;&gt;별도의 댓글 서비스를 이용해야 하는 이유&lt;/h2&gt;

&lt;p&gt;Jekyll을 통해 생성한 블로그는 &lt;strong&gt;정적으로 생성된 블로그&lt;/strong&gt;이다.&lt;br /&gt;
이 말은 즉, 동적으로 데이터를 보관하며 사용자에게 보여줄 수 있는 블로그가 아니다.&lt;/p&gt;

&lt;p&gt;댓글 서비스를 운영하기 위해서는 댓글이라는 데이터의 보관이 필요하고, 이는 Jekyll만 사용해서는 불가능하다.&lt;br /&gt;
따라서 외부 플러그인을 통해 댓글 서비스를 이용하는 방법을 사용하도록 한다.&lt;br /&gt;
여기서는 많은 GitHub Pages 블로그에서 사용하고 있는 Disqus 댓글 서비스를 연동하도록 한다.&lt;/p&gt;

&lt;p&gt;Disqus에서 제공하는 댓글 서비스는 간단한 블로그를 위해서는 무료 정책으로 충분하다.&lt;br /&gt;
혹시 다른 부가적인 기능이나 특징이 필요하다면, &lt;a href=&quot;https://disqus.com/pricing/&quot; target=&quot;_blank&quot;&gt;여기&lt;/a&gt;에서 가격 정책을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;disqus-가입-및-설정&quot;&gt;Disqus 가입 및 설정&lt;/h2&gt;

&lt;p&gt;블로그는 이미 준비되어 있다고 가정하고, 일단 Disqus에 가입해서 블로그 정보를 설정해야 한다.&lt;br /&gt;
&lt;a href=&quot;https://disqus.com/&quot; target=&quot;_blank&quot;&gt;Disqus&lt;/a&gt;에 접속해 이메일 또는 페이스북, 트위터, 구글 등의 계정을 통해 가입한다.&lt;/p&gt;

&lt;p&gt;가입 후에 홈페이지에서 ‘GET STARTED’ &amp;gt; ‘I want to install Disqus on my site’ 순서로 버튼을 누른다.&lt;br /&gt;
생성 화면에서 ‘Website Name’은 Disqus의 관리자 사이트로 이용되므로 블로그와 관련된 이름으로 작성한다.&lt;br /&gt;
이때, 생성되는 URL은 Disqus에서 유일해야 하므로 유의하도록 한다.&lt;br /&gt;
언어는 현재 한국어를 제공하지 않으므로 영어로 선택해 진행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/disqus_guide/1.png&quot; alt=&quot;Disqus Guide Step 1&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;플랜은 ‘Basic’ 플랜의 ‘Subscribe Now’ 버튼을 눌러 무료 플랜을 선택한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/disqus_guide/2.png&quot; alt=&quot;Disqus Guide Step 2&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;플랫폼 선택 화면에서 ‘Jekyll’ 항목을 누른다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/disqus_guide/3.png&quot; alt=&quot;Disqus Guide Step 3&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;그러면 Jekyll에 댓글 서비스를 설정하는 방법이 나오는데, 아래에서 알아보도록 한다.&lt;br /&gt;
여기서는 &lt;strong&gt;2번 항목의 ‘Universal Embed Code’ 링크&lt;/strong&gt;만 새 창에 띄워 놓고, ‘Configure’ 버튼을 누른다.&lt;br /&gt;
해당 링크는 추후 댓글 서비스를 설정할 때 필요한 페이지로, &lt;strong&gt;설정한 사이트마다 다른 코드가 생성되므로 미리 띄워 놓는다&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/disqus_guide/4.png&quot; alt=&quot;Disqus Guide Step 4&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;설정 화면에서 필요한 항목들을 작성하도록 한다.&lt;br /&gt;
&lt;strong&gt;‘Website URL’ 항목이 실제 연동할 사이트 주소에 해당한다&lt;/strong&gt;.&lt;br /&gt;
여기서 ‘Comment Policy’ 관련 항목들은 입력하지 않으면, 알아서 Disqus 정책에 따라 적용된다.&lt;br /&gt;
‘Complete Setup’ 버튼을 누르면, Disqus에 사이트 설정이 완료된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/disqus_guide/5.png&quot; alt=&quot;Disqus Guide Step 5&quot; /&gt;
 &lt;/p&gt;

&lt;p&gt;사이트 설정이 완료된 후에는 언제든지 Admin 화면으로 접속해 사이트를 관리할 수 있다.&lt;br /&gt;
생성 시에 설정한 것들 외에도 다양한 옵션이 있으니 살펴보는 것도 좋을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/disqus_guide/6.png&quot; alt=&quot;Disqus Guide Step 6&quot; /&gt;
&lt;img src=&quot;assets/disqus_guide/7.png&quot; alt=&quot;Disqus Guide Step 7&quot; /&gt;
 &lt;/p&gt;

&lt;h2 id=&quot;disqus-연동&quot;&gt;Disqus 연동&lt;/h2&gt;

&lt;p&gt;앞서 띄워 놓은 ‘Universal Embed Code’ 링크 페이지를 열어 보면, 첫 1번 항목에 소스 코드가 있을 것이다.&lt;br /&gt;
이 소스 코드가 &lt;strong&gt;Disqus 댓글 영역이 생기는 부분&lt;/strong&gt;이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disqus_thread&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
  *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
  *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*
  var disqus_config = function () {
    this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
    this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
  };
  */&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DON'T EDIT BELOW THIS LINE&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://jamesu-blog.disqus.com/embed.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;data-timestamp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://disqus.com/?ref_noscript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;만약, 해당 링크 페이지를 별도로 띄워 놓지 않았다면, 위 코드를 그대로 붙여 넣은 후, 15번째 줄에 &lt;code class=&quot;highlighter-rouge&quot;&gt;s.src&lt;/code&gt;에 대입하는 부분에 블로그에 해당하는 Disqus 관리자 사이트 URL을 입력하면 된다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;jamesu-blog&lt;/code&gt; 대신, 해당하는 &lt;strong&gt;관리자 사이트 URL&lt;/strong&gt;을 입력하도록 한다.&lt;/p&gt;

&lt;p&gt;그리고 Disqus는 다음과 같은 추가 작업을 추천한다.&lt;br /&gt;
(전체 내용은 &lt;a href=&quot;https://help.disqus.com/en/articles/1717137-use-configuration-variables-to-avoid-split-threads-and-missing-comments&quot; target=&quot;_blank&quot;&gt;이 문서&lt;/a&gt;를 참고한다.)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This works well for some sites, however, this method of creating threads can lead to duplicate “split threads” for the same page of content, especially when your site accepts many different URLs for the same page of content.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;즉, 같은 컨텐츠이지만 접근하는 URL이 달라 서로 다른 쓰레드(댓글 그룹)가 생성될 수도 있다는 말이다.&lt;/p&gt;

&lt;p&gt;예를 들어, 로컬 환경에서 띄운 블로그와 실제 배포된 블로그에 각각 접근했을 때, 서로 다른 쓰레드가 생성될 수 있다.&lt;br /&gt;
로컬 환경은 URL이 &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost&lt;/code&gt;로 시작하고, 배포된 블로그는 &lt;code class=&quot;highlighter-rouge&quot;&gt;실제 도메인&lt;/code&gt;으로 시작하기 때문이다.&lt;br /&gt;
서로 다른 쓰레드는 같은 컨텐츠임에도 불구하고, &lt;strong&gt;댓글의 불일치&lt;/strong&gt;를 발생시킬 수 있다.&lt;/p&gt;

&lt;p&gt;이런 현상을 방지하기 위해, 아래와 같이 주석을 해제하여 &lt;code class=&quot;highlighter-rouge&quot;&gt;disqus_config&lt;/code&gt; 함수를 정의하도록 한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disqus_thread&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/**
  *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
  *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://jamesu.blog{{ page.url }}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{{ page.id }}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DON'T EDIT BELOW THIS LINE&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://jamesu-blog.disqus.com/embed.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;data-timestamp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://disqus.com/?ref_noscript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;this.page.url&lt;/code&gt; 변수에는 동일한 URL을 가리키도록, 도메인 주소와 &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ page.url }}&lt;/code&gt;을 이용한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;this.page.identifier&lt;/code&gt; 변수에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;{{ page.id }}&lt;/code&gt;를 이용해 유일한 페이지 ID를 대입한다.&lt;/p&gt;

&lt;h3 id=&quot;댓글-영역을-꾸미고-싶다면&quot;&gt;댓글 영역을 꾸미고 싶다면&lt;/h3&gt;

&lt;p&gt;위 코드에서 보이는 것처럼, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div id=&quot;disqus_thread&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 요소 내부에 댓글 영역이 생긴다.&lt;br /&gt;
댓글 영역을 꾸미고 싶다면, 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;disqus_thread&lt;/code&gt; ID를 이용해 원하는 대로 꾸밀 수도 있다.&lt;br /&gt;
(여기서는 댓글 영역에 회색 외곽선을 추가했다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/disqus_guide/8.png&quot; alt=&quot;Disqus Guide Step 8&quot; /&gt;
 &lt;/p&gt;

&lt;h2 id=&quot;그-외-활용&quot;&gt;그 외 활용&lt;/h2&gt;

&lt;p&gt;기본적인 댓글 기능은 위와 같이 설정해서 사용할 수 있다.&lt;br /&gt;
만약, 포스트별로 댓글 기능의 사용 유무를 정하고 싶다면, &lt;a href=&quot;https://jekyllrb.com/docs/front-matter/&quot; target=&quot;_blank&quot;&gt;YAML Front Matter&lt;/a&gt;의 변수를 이용하면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;---
layout: default
comments: true
# other options
---
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;comments&lt;/code&gt; 변수와 같이, 페이지 변수를 설정하고 그것에 따라 댓글 영역 코드를 넣을지 말지를 결정하면 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;{% if page.comments %}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disqus_thread&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
    *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
    *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disqus_config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://jamesu.blog{{ page.url }}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;identifier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;{{ page.id }}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DON'T EDIT BELOW THIS LINE&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;https://jamesu-blog.disqus.com/embed.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;data-timestamp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;Please enable JavaScript to view the &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://disqus.com/?ref_noscript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이 밖에도 Disqus는 댓글 서비스와 관련해서 다양한 옵션을 제공하므로, 홈페이지를 참고하길 바란다.&lt;br /&gt;
또한, Disqus 관리자 사이트를 이용하면 댓글을 확인하고 관리할 수 있으므로 적극 활용하길 바란다. 👍&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="github-pages" /><category term="jekyll" /><category term="disqus" /><summary type="html">별도의 댓글 서비스를 이용해야 하는 이유</summary></entry><entry><title type="html">Codeforces 문제 풀이: 230B - T-primes</title><link href="https://jamesujeon.github.io/posts/2019/12/23/codeforces-problem-solving-230b-t-primes/" rel="alternate" type="text/html" title="Codeforces 문제 풀이: 230B - T-primes" /><published>2019-12-23T00:00:00+09:00</published><updated>2019-12-23T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2019/12/23/codeforces-problem-solving-230b-t-primes</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2019/12/23/codeforces-problem-solving-230b-t-primes/">&lt;p&gt;&lt;img src=&quot;assets/codeforces_230b_t-primes.png&quot; alt=&quot;230B - T-primes&quot; title=&quot;230B - T-primes&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/230/B&quot; target=&quot;_blank&quot;&gt;T-primes 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;정확히 3개의 소인수로 분해되는 숫자를 T-prime이라 정의한다.&lt;br /&gt;
이때, 주어진 숫자들이 T-prime이면 “YES”를, 아니라면 “NO”를 출력한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;어떤 숫자 T-prime인지 판별하려면, 그 조건을 명세화해야 한다.&lt;/p&gt;

&lt;p&gt;소인수가 3개가 되기 위해서, 1과 자기 자신을 제외한 숫자 1개는 &lt;strong&gt;제곱근&lt;/strong&gt;이 되어야 한다.&lt;br /&gt;
또한, 그 제곱근이 소수여야 더 이상 소인수로 분해되지 않으므로, 3개의 소인수가 남을 수 있다.&lt;br /&gt;
따라서, T-prime이 되기 위한 조건은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;대상 수의 제곱근은 &lt;strong&gt;소수&lt;/strong&gt;여야 한다.&lt;/li&gt;
  &lt;li&gt;대상 수의 제곱근을 &lt;strong&gt;정수화&lt;/strong&gt;하고 다시 제곱했을 때, 본래의 수와 동일해야 한다. (제곱근이 정수여야 한다.)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이때, 제곱근이 소수인지 판별하는 로직이 필요하다.&lt;br /&gt;
공간이 충분할 때, 효율적이고 빠른 방법으로 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4&quot; target=&quot;_blank&quot;&gt;에라토스테네스의 체(Sieve of Eratosthenes)&lt;/a&gt;가 있다.&lt;/p&gt;

&lt;p&gt;에라토스테네스의 체는 &lt;strong&gt;특정 범위의 수를 체로 걸러내듯이 소수가 아닌 수를 걸러 소수만 남겨내는 방법&lt;/strong&gt;이다.&lt;br /&gt;
이때, 작은 수부터 차례대로 증가시키면서 소수인 경우, 범위 내 배수를 모두 소수에서 걸러내는 방식을 취한다. (배수는 분해가 된다는 뜻이므로, 소수에 해당하지 않는다.)&lt;br /&gt;
특정 범위의 수 목록에 소수 여부를 미리 저장해두고, 원하는 수의 소수 여부만 확인하므로 매우 빠르게 판별할 수 있다.&lt;br /&gt;
단순히 적은 횟수만 소수 판별을 한다면, 에라토스테네스의 체는 굳이 필요하지 않다.&lt;br /&gt;
소수 판별을 많이 해야 할 때, 그때그때 소수를 판별한다면 시간이 오래 걸리므로, 소수 여부를 미리 계산하는 것이다.&lt;/p&gt;

&lt;p&gt;에라토스테네스의 체를 구할 때, 연산을 최소화하기 위해 대상 수의 제곱근까지만 순회하면 모든 소수를 구할 수 있다.&lt;br /&gt;
이 문제에서는 &lt;strong&gt;대상 수의 제곱근의 소수 여부&lt;/strong&gt;가 궁금하므로, &lt;strong&gt;소수 여부를 구하는 범위를 제곱근까지로 한정&lt;/strong&gt;지었다.&lt;/p&gt;

&lt;p&gt;만약 대상 수까지의 소수 여부를 구한다고 하면, 다음과 같이 구할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000000000000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000000000000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;YES&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;primes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="codeforces" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">Linux 부팅 시, 서비스 자동으로 시작하기</title><link href="https://jamesujeon.github.io/posts/2019/12/20/starting-service-automatically-on-boot-in-linux/" rel="alternate" type="text/html" title="Linux 부팅 시, 서비스 자동으로 시작하기" /><published>2019-12-20T00:00:00+09:00</published><updated>2019-12-20T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2019/12/20/starting-service-automatically-on-boot-in-linux</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2019/12/20/starting-service-automatically-on-boot-in-linux/">&lt;p&gt;&lt;a href=&quot;https://jamesu.dev/posts/2019/12/19/starting-container-automatically/&quot; target=&quot;_blank&quot;&gt;이전 글&lt;/a&gt;에서 Docker 컨테이너를 자동으로 시작하는 법을 알았다.&lt;br /&gt;
그렇다면, 서버가 죽었을 때 Docker가 시작되어야 Docker 컨테이너 또한 재시작을 할 수 있지 않을까?&lt;/p&gt;

&lt;p&gt;이 글에서는 Docker를 자주 사용하는 OS인 Linux 상에서 서비스를 자동으로 시작하는 법을 알아보도록 한다.&lt;br /&gt;
모두 적용한다면, 서버가 재시작됐을 때, Docker 서비스도 재시작되고, Docker 컨테이너도 재시작될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;linux-배포판별-버전별-차이&quot;&gt;Linux 배포판별, 버전별 차이&lt;/h2&gt;

&lt;p&gt;이미 알고 있는 것처럼 Linux는 Linux Kernel을 기반으로 다양한 배포판이 존재한다.&lt;br /&gt;
그런 배포판들은 제작자의 입맛에 맞춰 만들어진 것이므로 &lt;strong&gt;배포판별로 명령어가 상이할 수 있다&lt;/strong&gt;.&lt;br /&gt;
또한, 각 배포판은 버전이 오름에 따라 변화를 하면서 명렁어가 바뀌기도 한다.&lt;/p&gt;

&lt;p&gt;이처럼 배포판별, 버전별로 명렁어 차이가 존재할 수 있기 때문에 현재 사용하는 것에 맞춰 알아보고 사용해야 한다.&lt;br /&gt;
여기서는 자주 사용하는 명령어를 바탕으로 설명하며, 동일한 명령어가 존재하지 않을 수도 있으니 유의하길 바란다.&lt;/p&gt;

&lt;p&gt;한 쪽에 있는 명령어를 사용하는 배포판에서는 동일한 명령어들을 사용하므로, 같은 쪽의 명령어를 사용하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;서비스-관리-명령어&quot;&gt;서비스 관리 명령어&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;service&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;서비스 상태 확인 : &lt;code class=&quot;highlighter-rouge&quot;&gt;service 서비스명 status&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl status 서비스명&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;서비스 시작 : &lt;code class=&quot;highlighter-rouge&quot;&gt;service 서비스명 start&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl start 서비스명&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;서비스 정지 : &lt;code class=&quot;highlighter-rouge&quot;&gt;service 서비스명 stop&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl stop 서비스명&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;서비스 재시작 : &lt;code class=&quot;highlighter-rouge&quot;&gt;service 서비스명 restart&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl restart 서비스명&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;서비스-자동-시작-명령어&quot;&gt;서비스 자동 시작 명령어&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chkconfig&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;자동 시작 확인 : &lt;code class=&quot;highlighter-rouge&quot;&gt;chkconfig 서비스명 --list&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl is-enabled 서비스명&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;자동 시작 설정 : &lt;code class=&quot;highlighter-rouge&quot;&gt;chkconfig 서비스명 on&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl enable 서비스명&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;자동 시작 해제 : &lt;code class=&quot;highlighter-rouge&quot;&gt;chkconfig 서비스명 off&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;systemctl disable 서비스명&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>jamesujeon</name></author><category term="linux" /><category term="command" /><summary type="html">이전 글에서 Docker 컨테이너를 자동으로 시작하는 법을 알았다. 그렇다면, 서버가 죽었을 때 Docker가 시작되어야 Docker 컨테이너 또한 재시작을 할 수 있지 않을까?</summary></entry><entry><title type="html">Codeforces 문제 풀이: 4C - Registration system</title><link href="https://jamesujeon.github.io/posts/2019/12/20/codeforces-problem-solving-4c-registration-system/" rel="alternate" type="text/html" title="Codeforces 문제 풀이: 4C - Registration system" /><published>2019-12-20T00:00:00+09:00</published><updated>2019-12-20T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2019/12/20/codeforces-problem-solving-4c-registration-system</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2019/12/20/codeforces-problem-solving-4c-registration-system/">&lt;p&gt;&lt;img src=&quot;assets/codeforces_4c_registration_system.png&quot; alt=&quot;4C - Registration system&quot; title=&quot;4C - Registration system&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://codeforces.com/problemset/problem/4/C&quot; target=&quot;_blank&quot;&gt;Registration system 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;사용자 이름을 등록하는 시스템으로 중복 이름을 허용하지 않는다.&lt;br /&gt;
다수의 이름을 입력받아 차례대로 시스템에 등록을 요청해 정상적으로 등록되는 경우, “OK”를 출력한다.&lt;br /&gt;
이름이 중복되는 경우, 이름 뒤에 숫자를 추가해 등록하고 변경된 이름을 출력한다.&lt;br /&gt;
중복되는 이름이 다수인 경우, 차례대로 숫자를 증가시켜 추가한다.&lt;br /&gt;
입력하는 이름은 모두 소문자 영문자만 가능하다. (숫자를 입력하는 경우가 없다.)&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;중복되는 이름이 다수인 경우에 차례대로 숫자를 증가시켜 추가해야 하므로, 중복될 때마다 그 수를 기억해야 한다.&lt;br /&gt;
그러면, 저장할 데이터는 이름과 중복 수가 되고, 이를 효율적으로 관리하기 위해 &lt;a href=&quot;https://namu.wiki/w/%ED%95%B4%EC%8B%9C&quot; target=&quot;_blank&quot;&gt;해시&lt;/a&gt; 테이블을 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;해시 테이블&lt;/strong&gt;은 Key-Value 구조로 데이터를 보관하는 자료구조로, Key를 위해 해시 함수를 이용한다.&lt;br /&gt;
일반적으로 별도의 해시 함수를 구현하지 않으면, 객체의 주소값 등을 Key로 이용할 수 있다.&lt;/p&gt;

&lt;p&gt;Python에서는 이러한 해시 테이블로 이용할 수 있는 자료구조로 &lt;strong&gt;Dictionary&lt;/strong&gt;라 하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;dict&lt;/code&gt;가 존재한다.&lt;br /&gt;
이 문제에서 입력받는 이름을 Key로, 중복 수를 Value로 사용하면, 효율적으로 데이터를 보관할 수 있다.&lt;br /&gt;
키를 바탕으로 값에 접근하기 때문에 순차적으로 검색해서 원하는 값을 얻는 배열에 비해 효율적이고, 편리하다.&lt;/p&gt;

&lt;p&gt;입력받은 이름들을 차례대로 Dictionary에 존재하는지 확인하고, 존재하면 중복 수를 증가시키고, 존재하지 않으면 Dictionary에 추가한다.
키로 존재 여부를 확인하고, 키로 값에 접근하기 때문에 속도가 매우 빠르다.&lt;br /&gt;
중복되는 경우, 중복 수를 이용해 이름을 변경하도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;name_dict&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;enumerate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="codeforces" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">Docker 컨테이너 자동으로 시작하기</title><link href="https://jamesujeon.github.io/posts/2019/12/19/starting-container-automatically/" rel="alternate" type="text/html" title="Docker 컨테이너 자동으로 시작하기" /><published>2019-12-19T00:00:00+09:00</published><updated>2019-12-19T00:00:00+09:00</updated><id>https://jamesujeon.github.io/posts/2019/12/19/starting-container-automatically</id><content type="html" xml:base="https://jamesujeon.github.io/posts/2019/12/19/starting-container-automatically/">&lt;p&gt;Docker가 재시작되지 않고 항상 켜져있을 수 있다면, 컨테이너를 재시작할 필요는 없을 것이다.&lt;br /&gt;
하지만, Docker를 구동하고 있는 서버가 불의의 사고 또는 고의의 사고로 갑작스럽게 종료될 수 있는 가능성은 존재한다.&lt;br /&gt;
따라서, 서버가 재시작될 때 Docker도 재시작되고, 기존에 Docker가 유지하던 컨테이너 또한 재시작되도록 해야 한다.&lt;/p&gt;

&lt;p&gt;Docker를 재시작하는 방법은 다음으로 미루고, 여기서는 Docker 컨테이너를 재시작하는 방법을 다룬다.&lt;/p&gt;

&lt;h2 id=&quot;기본적인-docker-run&quot;&gt;기본적인 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Docker에서 특정 옵션 없이 기본 명령어인 &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;으로 컨테이너를 구동한 경우, Docker가 재시작한다면 컨테이너는 자동으로 시작되지 않는다.&lt;/p&gt;

&lt;p&gt;다음과 같이, 재시작 관련 옵션 없이 컨테이너가 종료되지 않도록 구동시키고, Docker를 재시작한다.&lt;br /&gt;
(이미지는 Public Repository로부터 &lt;code class=&quot;highlighter-rouge&quot;&gt;centos&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull centos&lt;/code&gt;로 받아 사용한다.)&lt;br /&gt;
(Docker 재시작 명령어는 OS 별로 상이할 수 있다.)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -d --name test centos tail -f /dev/null
docker ps -a
service docker restart
docker ps -a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;마지막 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps -a&lt;/code&gt; 명령어를 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 컨테이너가 종료 상태인 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이는 재시작 옵션(&lt;code class=&quot;highlighter-rouge&quot;&gt;--restart&lt;/code&gt;)에 기본값으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;no&lt;/code&gt;가 들어가기 때문이다.&lt;br /&gt;
말그대로 재시작을 하지 않겠다는 뜻이다.&lt;/p&gt;

&lt;h2 id=&quot;재시작-옵션과-함께&quot;&gt;재시작 옵션과 함께&lt;/h2&gt;

&lt;p&gt;위 옵션을 주면, Docker가 갑작스럽게 종료되었다가 다시 시작할 때, 컨테이너 또한 재시작하게 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;docker run -d --restart always --name test centos tail -f /dev/null
docker ps -a
service docker restart
docker ps -a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Docker 재시작 시간에 맞춰 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; 컨테이너도 재시작된 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;이 외에도 다른 재시작 옵션이 존재한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;no&lt;/code&gt; : 말그대로 NO (기본값)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;on-failure&lt;/code&gt; : 에러로 인해 종료될 시 재시작한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;always&lt;/code&gt; : 항상 재시작한다. 수동으로 종료한 경우, Docker가 재시작되면 같이 재시작된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unless-stopped&lt;/code&gt; : 컨테이너가 종료되지 않는다면, 항상 재시작하한다. 종료되었다면, 직접 시작하기 전까지는 Docker가 재시작되도 컨테이너는 재시작되지 않는다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;자세한 내용은 &lt;a href=&quot;https://docs.docker.com/config/containers/start-containers-automatically/&quot; target=&quot;_blank&quot;&gt;Docker Documentation&lt;/a&gt;에서 확인할 수 있다. (영어 주의 ⚠️)&lt;/p&gt;

&lt;h2 id=&quot;그-외-방법&quot;&gt;그 외 방법&lt;/h2&gt;

&lt;p&gt;이렇게 컨테이너를 구동할 때마다 재시작 옵션을 주는 방법밖에 없을까?&lt;/p&gt;

&lt;p&gt;조건에 Docker를 걸어둔 일종의 서비스 파일을 작성하면 가능하다.&lt;br /&gt;
이는 컨테이너를 항상 재시작할 때는 문제 없지만, 개인적으로는 직접 옵션을 주는 것을 선호한다.&lt;br /&gt;
옵션에 따라 원하는 동작이 명확하고, 누군가는 서비스 파일을 인지하지 못할 수도 있기 때문이다.&lt;/p&gt;

&lt;p&gt;취향에 따라 방법을 선택해 적용하도록 한다.&lt;br /&gt;
참고로 서비스 파일을 작성한다면, OS마다 서비스 등록법이 상이할 수 있으니 유의해서 적용하길 바란다.&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="docker" /><category term="container" /><summary type="html">Docker가 재시작되지 않고 항상 켜져있을 수 있다면, 컨테이너를 재시작할 필요는 없을 것이다. 하지만, Docker를 구동하고 있는 서버가 불의의 사고 또는 고의의 사고로 갑작스럽게 종료될 수 있는 가능성은 존재한다. 따라서, 서버가 재시작될 때 Docker도 재시작되고, 기존에 Docker가 유지하던 컨테이너 또한 재시작되도록 해야 한다.</summary></entry></feed>