<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko_KR"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://jamesu.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jamesu.dev/" rel="alternate" type="text/html" hreflang="ko_KR" /><updated>2020-05-15T01:09:01+09:00</updated><id>https://jamesu.dev/</id><title type="html">Jamesu Devlog</title><subtitle>Dev Blog by James Minsu Jeon</subtitle><author><name>jamesujeon</name><email>jamesujeon@gmail.com</email></author><entry><title type="html">TIL 3: 안드로이드 테스트는 힘들어 (feat. 파편화)</title><link href="https://jamesu.dev/posts/2020/05/14/til-3-android-testing-is-so-hard-feat-fragmentation/" rel="alternate" type="text/html" title="TIL 3: 안드로이드 테스트는 힘들어 (feat. 파편화)" /><published>2020-05-14T00:00:00+09:00</published><updated>2020-05-14T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/05/14/til-3-android-testing-is-so-hard-feat-fragmentation</id><content type="html" xml:base="https://jamesu.dev/posts/2020/05/14/til-3-android-testing-is-so-hard-feat-fragmentation/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이미 알고 있었던 것처럼 &lt;strong&gt;안드로이드의 파편화&lt;/strong&gt;는 끔찍했다.&lt;br /&gt;
하지만, 더 끔찍했던 것은 &lt;strong&gt;앱의 완성도&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NPE&lt;/code&gt; 방지는 기본 중의 기본! (특히, 모바일 개발에서는 필수!)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SwipeRefreshLayout&lt;/code&gt; 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;가 연속으로 중첩된 경우,&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;nestedScrollingEnabled&lt;/code&gt; 옵션을 이용해 새로고침 동작이 중복되지 않도록 할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;끔찍한-안드로이드의-파편화&quot;&gt;끔찍한 안드로이드의 파편화&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.jpg&quot; alt=&quot;Figure 1&quot; /&gt;
&lt;em&gt;내 표정도 이와 같다.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;오늘 하루 날을 잡아 사내에서 개발한 안드로이드 앱 하나의 테스트를 진행하고 이슈를 처리하는 시간을 가졌다.
내가 직접 만든 앱이었다면, 알 수 없는 자신감으로 버그가 적을 것이라 예상할 수 있지만, 인수인계 받은 앱이라 정상 작동을 확신하지 못했다.
그렇게 OS 버전과 제조사를 고려해 Android 4.4 ~ 9.0 버전과 삼성 및 LG의 핸드폰을 대상으로 테스트를 진행했다.&lt;/p&gt;

&lt;p&gt;버전 이슈가 없길 희망했지만, 결과는 희망을 배신했다.&lt;br /&gt;
아무래도 이렇게 다양한 버전과 기기를 대상으로 테스트한 것은 처음이라 그런지 OS 버전에 따른 이슈가 존재했다.
특히, 4.4 버전의 이슈가 대부분이었고, 다행히 다른 버전에서는 큰 이슈가 없었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_2.png&quot; alt=&quot;Figure 2&quot; title=&quot;Figure 2&quot; /&gt;
&lt;em&gt;안드로이드 OS 버전 파편화&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;사전에 최소 OS 버전을 무엇으로 할 지 조사를 한 결과, &lt;strong&gt;약 95% 이상을 커버하려면 4.4 버전(KitKat) 이상&lt;/strong&gt;이어야 했다.
물론, 4.4 버전을 사용하는 사용자는 매우 적을 것이라 생각하지만, 업무 도메인 특성상 옛날 폰을 사용하는 사용자가 존재할 가능성이 있기 때문이다.
아무튼 4.4 버전에서만 발생하는 이슈가 많아 5.0 버전부터 지원할 지 논의할 예정이다.&lt;/p&gt;

&lt;p&gt;이처럼 안드로이드는 iOS에 비해 버전 파편화와 기기 파편화가 심해서 예상했던 결과였다.
(기기 파편화를 고려해 여러 제조사를 테스트하고 싶었으나 해당 테스트 센터에서는 준비된 기기가 없었다.)&lt;/p&gt;

&lt;p&gt;정말 끔찍했던 것은 파편화의 문제가 아니라 &lt;strong&gt;앱의 완성도&lt;/strong&gt;였다.&lt;br /&gt;
개인적으로 앱을 개발할 때 앱의 완성도를 신경쓰는 편이다.
iOS 버전과의 &lt;strong&gt;동작의 일관성&lt;/strong&gt;을 당연하고, 특별한 경우를 제외하고는 &lt;strong&gt;UI의 일관성&lt;/strong&gt;도 유지하려고 한다.
그런데 여기서 당연하게 되어야 할 동작의 일관성에 버그가 꽤나 발견됐다.
앞서 개발 후 보유한 기기를 토대로 테스트를 진행했는데도 버그가 존재한 채로 출시한 것이다.
요구사항에 대한 기본적인 테스트도 진행하지 않으며 개발한 것이 눈에 보였다.
(중요한 요구사항 일부가 정상적으로 반영되지 않았다.)&lt;/p&gt;

&lt;p&gt;이제는 인수인계를 받은 앱이기 때문에 지금부터 발생하는 버그는 내 책임이 될 것이다.&lt;br /&gt;
나도 누군가에게 내가 받은 느낌을 주지 않도록 앱의 완성도를 끌어 올리는데 더욱 노력해야겠다. 💪&lt;/p&gt;

&lt;h2 id=&quot;npe-방지를-놓치는-실수는-하지-말자&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NPE&lt;/code&gt; 방지를 놓치는 실수는 하지 말자&lt;/h2&gt;

&lt;p&gt;앞서 말한 버그 중 하나는 개발자라면 누구나 맞이한 적이 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Null Pointer Exception (이하 NPE)&lt;/code&gt;였다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NPE&lt;/code&gt;는 런타임 에러 중 하나로, &lt;strong&gt;메모리에 할당되지 않은 주소에 접근을 시도한 경우 발생하는 예외&lt;/strong&gt;이다.&lt;br /&gt;
서버 개발이라면, 공통 예외 처리를 통해 서버가 종료되지 않고 에러를 반환하는 식의 처리가 가능하다.
하지만, &lt;strong&gt;모바일 개발에서는 예외 처리를 놓치면 앱이 강제 종료(Crash)&lt;/strong&gt;되기 때문에 매우 치명적이다.
사용하던 앱이 갑자기 알 수 없이 꺼진다면 누구라도 쓰고 싶지 않을 것이다.
그래서 서버 개발에서도 중요하겠지만, 특히 모바일 개발에서 예외 처리는 너무 중요한 부분이다.&lt;/p&gt;

&lt;p&gt;그 중에서도 &lt;code class=&quot;highlighter-rouge&quot;&gt;NPE&lt;/code&gt;는 놓치기 쉬운 예외이다.&lt;br /&gt;
너무나 당연하게 주소에 값이 할당되어 있다고 생각하고 문법을 작성하면, 어느 순간 맞이할 수 있을 것이다.
개발자가 예상할 수 있는 예외는 해당 부분에 예외 처리를 하면 되지만,
&lt;code class=&quot;highlighter-rouge&quot;&gt;NPE&lt;/code&gt;는 기본 문법의 실수로 발생하는 예외이기 때문에 더욱 주의가 필요하다.&lt;/p&gt;

&lt;p&gt;위에서 발생한 버그는 앱에서 로그인한 후에 처음으로 맞이하는 화면에서 간헐적으로 발생하던 버그이다.
나라도 로그인하자마자 앱이 꺼진다면 어이가 없을 것이다.
기존에 발견되지 않은 이유는 기기와 OS 버전에 따라 발생했던 버그라 우연히 발견되지 않았다.
역시나 안드로이드는 파편화에 대한 테스트 진행이 필수인 것 같다.&lt;/p&gt;

&lt;p&gt;앞으로 나도 더 꼼꼼하게 놓치지 않고 &lt;code class=&quot;highlighter-rouge&quot;&gt;NPE&lt;/code&gt; 예외 처리를 해야겠다.
(욕먹기 싫다면 🙄)&lt;/p&gt;

&lt;h2 id=&quot;새로고침-동작이-엉뚱한-부분에서-시작되는-경우&quot;&gt;새로고침 동작이 엉뚱한 부분에서 시작되는 경우&lt;/h2&gt;

&lt;p&gt;발견한 또 다른 버그는 UI 이슈였다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;를 사용할 때, &lt;strong&gt;당겨서 새로고침&lt;/strong&gt; 동작을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;SwipeRefreshLayout&lt;/code&gt;를 사용했다.
그런데, &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt; 안의 항목 내부에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;를 사용해서 중첩된 구조였다.
새로고침 동작은 가장 외부에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;를 당겨서 수행하고 싶었지만,
저 아래로 스크롤한 후에 항목 내부의 &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;를 당기는 경우에도 새로고침 동작이 수행되는 것이었다.&lt;/p&gt;

&lt;p&gt;그래서 알아본 결과, 항목 내부의 &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;nestedScrollingEnabled&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;로 설정하면
외부의 &lt;code class=&quot;highlighter-rouge&quot;&gt;RecyclerView&lt;/code&gt;에 대해서만 새로고침 동작이 작동하게 된다.&lt;/p&gt;

&lt;p&gt;참고로 해당 옵션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;에서도 설정할 수 있지만, 4.4 버전을 지원하기 위해서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt;이 아닌 코드로 설정해야 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;recyclerView.setNestedScrollingEnabled(false)&lt;/code&gt;와 같이 말이다.&lt;/p&gt;

&lt;p&gt;iOS 개발이 메인이지만, 안드로이드 개발 경험도 점점 쌓이고 있어 재밌는 것 같다. 😂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="android" /><category term="test" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 2: 팀 간 의사소통의 중요성</title><link href="https://jamesu.dev/posts/2020/05/13/til-2-importance-of-communication-between-teams/" rel="alternate" type="text/html" title="TIL 2: 팀 간 의사소통의 중요성" /><published>2020-05-13T00:00:00+09:00</published><updated>2020-05-13T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/05/13/til-2-importance-of-communication-between-teams</id><content type="html" xml:base="https://jamesu.dev/posts/2020/05/13/til-2-importance-of-communication-between-teams/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;팀 간 의사소통의 핵심은 &lt;strong&gt;서로를 위한 배려&lt;/strong&gt;이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;당연하지만-쉽지-않은-의사소통&quot;&gt;당연하지만 쉽지 않은 의사소통&lt;/h2&gt;

&lt;p&gt;다수의 팀으로 이루어진 회사에서 팀 간 의사소통은 당연하고 중요하지만 원하는 대로 이뤄지지 않는 경우가 많다.
회식을 하면 종종 타 팀과의 의사소통에 대한 불만을 듣는다.
겉으로 보기에 사이가 친하고 의사소통에 문제가 없어 보이는 멤버들 간에도 앙금이 쌓여 있어 불만을 토로 하는 것을 보면,
그런 사이에서도 일적인 의사소통은 정말 힘들 수 있다는 생각이 든다.
그래서 일 자체가 아닌 의사소통으로 인해 스트레스가 쌓이는 것을 보면 안타깝다는 생각도 든다.&lt;/p&gt;

&lt;p&gt;나의 경우에는 위 사례에서의 멤버가 앙금이 쌓여 있는 대상과 의사소통을 할 때, 특별히 까다롭지도 답답하지도 어렵지도 않다는 느낌을 받았다.
더불어 물론 의사소통에 의한 스트레스도 받고 있지 않다.
오히려 나와 일하는 것이 좋다는 이야기도 들어, 그런 이야기를 들을 때마다 뿌듯함이 함께한다.&lt;/p&gt;

&lt;h2 id=&quot;의사소통의-핵심&quot;&gt;의사소통의 핵심?&lt;/h2&gt;

&lt;p&gt;그렇다면, 나와 의사소통에 어려움을 겪고 있는 멤버와의 차이점은 무엇일까?&lt;br /&gt;
개인적으로 생각하기엔 좋은 의사소통의 핵심은 &lt;strong&gt;서로를 위한 배려&lt;/strong&gt;라고 생각한다.&lt;/p&gt;

&lt;p&gt;이것도 어찌 보면 당연하지만 제대로 실천되고 있지 않아 어려움을 겪는 사람들이 많다고 생각한다.
업무에 대한 이야기 함에 있어 상대방을 배려해 어느 정도 책임을 나눠 가지고(책임을 전가하지 않고),
어느 정도 의견을 수용하려 하고(항상 내가 옳다는 생각을 버리고),
어느 정도 서로의 역할을 이해하면(역할에 따라 앎의 정도가 다르다는 것을 이해하면),
서로 간의 신뢰감도 쌓이고 업무적으로 더 친밀해진다는 것을 느낄 수 있다.
그런 관계가 되고 나면, 팀 간 의사소통으로 인해 발생하는 스트레스도 없고 업무도 잘 처리되는 선순환이 이뤄지는 것을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;앞으로도 이런 마음가짐을 토대로 팀 간 의사소통에 대해 긍정적으로 생각하고 실천하도록 하자.&lt;br /&gt;
지금까지 나도 모르게 의사소통을 잘 해왔다는 생각에 마음이 매우 뿌듯한 하루였다. 🙂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="idea" /><summary type="html">TL;DR</summary></entry><entry><title type="html">TIL 1: Today I Learned 기록 시작</title><link href="https://jamesu.dev/posts/2020/05/12/til-1-starting-today-i-learned/" rel="alternate" type="text/html" title="TIL 1: Today I Learned 기록 시작" /><published>2020-05-12T00:00:00+09:00</published><updated>2020-05-12T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/05/12/til-1-starting-today-i-learned</id><content type="html" xml:base="https://jamesu.dev/posts/2020/05/12/til-1-starting-today-i-learned/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;매일 TIL을 작성해 &lt;code class=&quot;highlighter-rouge&quot;&gt;일일 배움&lt;/code&gt;을 실천하고 성장하자.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;til이란&quot;&gt;TIL이란?&lt;/h2&gt;

&lt;p&gt;TIL은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Today I Learned&lt;/code&gt;의 약자로, &lt;strong&gt;오늘 배운 것&lt;/strong&gt;을 뜻하는 말이다.&lt;/p&gt;

&lt;p&gt;블로그를 작성하는 개발자라면 많이 들어보기도 했을 것이고, GitHub에 잔디를 심기 위해 매일 TIL을 작성함으로써 일일 커밋을 실천하는 사람도 있을 것이다.
또한, 까먹지 않기 위해 기록하고 정리하는 용도로 사용하는 사람도 있고, 꾸준함을 습관화하기 위해 작성하는 사람도 있을 것이다.&lt;/p&gt;

&lt;p&gt;이처럼 TIL의 용도는 무궁무진하다.&lt;br /&gt;
그렇다면, 나는 어떻게 사용할 것인가?&lt;/p&gt;

&lt;h2 id=&quot;내-til의-목적&quot;&gt;내 TIL의 목적&lt;/h2&gt;

&lt;p&gt;나의 경우, GitHub에 잔디를 심기 위해 이 블로그에 글을 꾸준히 올리고 싶었지만,
잘못된 정보를 전달하지 않고 글의 완성도를 높이기 위해 조사를 더 하다보면, 글 하나를 작성하는 데에도 많은 시간이 소요된다.
그렇게 긴 글을 작성하는 것도 아닌데 말이다. (글 솜씨가 부족한 것도 있다.)&lt;br /&gt;
그 대신, 알고리즘 문제를 꾸준히 풀어 GitHub에 올리는 것으로 잔디 심기를 하고 있다.
그래서 사실 나의 TIL은 일일 커밋을 통한 잔디 심기가 목적이 아니다.&lt;/p&gt;

&lt;p&gt;일일 커밋도 좋지만, 그보다는 내 스스로의 성장을 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;일일 배움&lt;/code&gt;을 실천하고 싶다.&lt;br /&gt;
그 주제가 무엇이 되든 상관 없다.
배울 수 있는 것이라면, 개발 주제가 될 수도 있고, 어떤 생각이 될 수도 있고, 책에서 얻은 배움이 될 수도 있다.
매일 글을 쓰면서 나도 모르게 늘어나는 글 솜씨도 배움이 될 수 있다. (간절)&lt;br /&gt;
그렇게 매일 더 나아지는 내가 되길 바라며 TIL을 작성하고자 한다.&lt;/p&gt;

&lt;h2 id=&quot;앞으로의-방향&quot;&gt;앞으로의 방향&lt;/h2&gt;

&lt;p&gt;TIL을 시작하면, 가장 중요한 부분은 &lt;strong&gt;꾸준함&lt;/strong&gt;이라 생각된다.&lt;br /&gt;
현재 블로그의 경우, CLI로 직접 배포하며 글을 올리고 있어 귀차니즘이 심하고,
계속 언급한 글 솜씨의 부족으로 내용을 생각하고 정리하는 데 많은 시간이 소요된다. (변명 아닌 변명)&lt;br /&gt;
그래서 TIL만큼은 기존의 글을 쓰듯이 매우 정성들여 쓰기 보다는 가볍더라도 &lt;strong&gt;기록하는 것에 초점을 맞추고자 한다&lt;/strong&gt;.
(물론, 어느 정도 이해는 할 수 있도록 작성해야 한다. 술 먹고 작성할 때 조심 😅)&lt;/p&gt;

&lt;p&gt;미래의 내가 실망하고 후회하지 않도록 꾸준히 작성해보자. 🙂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="idea" /><summary type="html">TL;DR</summary></entry><entry><title type="html">백준 문제 풀이: 15649 - N과 M (1)</title><link href="https://jamesu.dev/posts/2020/04/13/baekjoon-problem-solving-15649/" rel="alternate" type="text/html" title="백준 문제 풀이: 15649 - N과 M (1)" /><published>2020-04-13T00:00:00+09:00</published><updated>2020-04-13T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/04/13/baekjoon-problem-solving-15649</id><content type="html" xml:base="https://jamesu.dev/posts/2020/04/13/baekjoon-problem-solving-15649/">&lt;p&gt;&lt;img src=&quot;assets/baekjoon_15649.png&quot; alt=&quot;15649 - N과 M (1)&quot; title=&quot;15649 - N과 M (1)&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/15649&quot; target=&quot;_blank&quot;&gt;N과 M (1) 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;N까지의 자연수 중 중복 없이 M개를 고른 수열은 &lt;a href=&quot;https://ko.wikipedia.org/wiki/순열&quot; target=&quot;_blank&quot;&gt;순열(Permutation)&lt;/a&gt;을 뜻한다.
먼저 순열의 정의를 파악하고, 문제를 풀이하도록 한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;사실 이 문제는 &lt;strong&gt;Python&lt;/strong&gt;을 사용한다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;itertools.permutations()&lt;/code&gt; 함수를 이용해 답을 바로 구할 수 있다.&lt;br /&gt;
Python에서 손쉽게 순열, 조합 등을 구할 수 있는 함수를 제공하기 때문이다.&lt;br /&gt;
하지만, 그것은 &lt;strong&gt;백트래킹&lt;/strong&gt;을 연습하고자 하는 이 문제의 의도와 다르므로 사용하지 않도록 한다.&lt;/p&gt;

&lt;p&gt;위에서 언급한 &lt;a href=&quot;https://ko.wikipedia.org/wiki/퇴각검색&quot; target=&quot;_blank&quot;&gt;백트래킹(Backtracking, 퇴각검색)&lt;/a&gt;이란 무엇일까?&lt;br /&gt;
백트래킹은 &lt;a href=&quot;https://ko.wikipedia.org/wiki/깊이_우선_탐색&quot; target=&quot;_blank&quot;&gt;DFS(Depth-First Search, 깊이 우선 탐색)&lt;/a&gt;의 방식을 기반으로,
&lt;strong&gt;불필요한 경우를 배제하며 원하는 해답에 도달할 때까지 탐색하는 전략&lt;/strong&gt;이다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;Figure 1&quot; title=&quot;Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위 그림과 같이, DFS를 기반으로 두고 있기 때문에 &lt;a href=&quot;https://ko.wikipedia.org/wiki/스택&quot; target=&quot;_blank&quot;&gt;스택(Stack)&lt;/a&gt;을 이용해 퇴각을 하며
다음 탐색을 진행하기 때문에 백트래킹(또는 퇴각검색)이라 불린다.&lt;/p&gt;

&lt;p&gt;백트래킹은 기본적으로는 모든 경우의 수를 탐색한다는 &lt;a href=&quot;https://namu.wiki/w/%EB%B8%8C%EB%A3%A8%ED%8A%B8%20%ED%8F%AC%EC%8A%A4&quot; target=&quot;_blank&quot;&gt;브루트 포스(Brute Force)&lt;/a&gt; 전략을 취하지만,
처리 속도를 향상시키기 위한 &lt;strong&gt;가지치기(Pruning)&lt;/strong&gt;가 중요한 역할을 한다.&lt;br /&gt;
나무에서 불필요한 가지를 제거하듯이 백트래킹에서 가지치기를 잘 할수록 불필요한 경우가 제거되어 처리 속도가 많이 향상된다.&lt;/p&gt;

&lt;p&gt;다시 문제로 돌아와서, 이 문제는 &lt;strong&gt;숫자를 선택하는 경우의 수로 이루어진 트리&lt;/strong&gt;로 볼 수 있다.&lt;br /&gt;
반복적으로 숫자를 선택해 M개까지 골라 수열을 완성하는 것이 목표이다.&lt;br /&gt;
따라서, 백트래킹을 적용해 불필요한 경우를 배제한 모든 경우의 수를 고려할 수 있다.&lt;/p&gt;

&lt;p&gt;숫자를 선택할 때는 1부터 N까지의 자연수 중 선택해야 하므로, 차례대로 선택하는 경우의 수가 있을 것이다.&lt;br /&gt;
이때, 반드시 &lt;strong&gt;해당 경우의 수를 스택에 추가(Push)하고, 동작(여기서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;f()&lt;/code&gt; 함수)이 끝난 후에는 다시 스택에서 빼내는 작업(Pop)이 필요하다&lt;/strong&gt;.
그래야 정상적으로 이전의 상황으로 돌아올 수 있기 때문이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그렇게 선택을 반복했을 때, 그 선택한 경우의 수가 M이 되면 모두 고른 것이 되므로 해답이 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;하지만, 위와 같이 &lt;strong&gt;항상 1부터 N까지의 자연수를 모두 순회하면, 이미 선택한 숫자를 또 선택해가며 시간을 낭비하게 된다&lt;/strong&gt;.&lt;br /&gt;
그래서 이미 선택한 숫자를 다시 선택하려 하면 배제하는 방식으로 &lt;strong&gt;가지치기&lt;/strong&gt;를 할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;ps-함수-호출-스택-이용하기&quot;&gt;P.S. 함수 호출 스택 이용하기&lt;/h3&gt;

&lt;p&gt;여기서는 DFS를 위한 스택으로 Python의 List를 이용했다.&lt;br /&gt;
이와 다른 방식으로 다음과 같이 &lt;strong&gt;순수하게 함수만을 이용해서 구현할 수도 있다&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이것이 가능한 이유는 &lt;strong&gt;함수의 호출 방식이 스택의 동작 방식과 일치&lt;/strong&gt;하기 때문이다.&lt;br /&gt;
함수가 호출되면, 함수의 호출 스택에 함수를 위한 요소들이 차례대로 쌓이고(Push),&lt;br /&gt;
함수가 종료되면, 함수의 호출 스택에서 해당 요소들이 제거(Pop)된다.&lt;br /&gt;
결국, 함수가 호출되기 전의 상태로 돌아가게 된다.&lt;/p&gt;

&lt;p&gt;이처럼 함수 호출 스택을 사용해서 스택을 이용하는 다른 알고리즘에 적용해 보는 것도 도움이 될 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="baekjoon" /><category term="backtracking" /><category term="dfs" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">백준 문제 풀이: 4673 - 셀프 넘버</title><link href="https://jamesu.dev/posts/2020/04/05/baekjoon-problem-solving-4673/" rel="alternate" type="text/html" title="백준 문제 풀이: 4673 - 셀프 넘버" /><published>2020-04-05T00:00:00+09:00</published><updated>2020-04-05T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/04/05/baekjoon-problem-solving-4673</id><content type="html" xml:base="https://jamesu.dev/posts/2020/04/05/baekjoon-problem-solving-4673/">&lt;p&gt;&lt;img src=&quot;assets/baekjoon_4673.png&quot; alt=&quot;4673 - 셀프 넘버&quot; title=&quot;4673 - 셀프 넘버&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/4673&quot; target=&quot;_blank&quot;&gt;셀프 넘버 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;생성자의 개수와 관계없이 생성자가 없는 숫자가 셀프 넘버이므로, 생성자의 존재 여부만 확인하면 된다.&lt;br /&gt;
생성자의 존재 여부를 어떻게 해결할 것인지에 초점을 맞춘다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;여러 숫자에 대해 각 숫자가 생성자를 가지는지 아닌지 판단하는 것은 매우 많은 계산량을 필요로 하게 된다.&lt;br /&gt;
그렇다면, 반대로 생각해보자.&lt;/p&gt;

&lt;p&gt;특정 숫자를 생성자로 가지는 다음 숫자는 문제에서 정의한 &lt;code class=&quot;highlighter-rouge&quot;&gt;d(n)&lt;/code&gt; 함수를 통해 쉽게 구할 수 있을 것이다.&lt;br /&gt;
또한, 반복적으로 해당 함수를 적용하면, 계속해서 해당 생성자를 가지는 숫자들을 구할 수 있다.&lt;br /&gt;
&lt;strong&gt;셀프 넘버의 정의가 생성자가 없는 숫자이므로, 생성자를 가지는 숫자들은 셀프 넘버가 아닌 것이다&lt;/strong&gt;.&lt;br /&gt;
위의 방법으로 셀프 넘버가 아닌 숫자들을 빠르고 쉽게 구할 수 있다.&lt;/p&gt;

&lt;p&gt;그리고 이 문제처럼 범위가 주어진다면, 소수를 구할 때 체를 걸러내는 방식인 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4&quot; target=&quot;_blank&quot;&gt;에라토스테네스의 체(Sieve of Eratosthenes)&lt;/a&gt;의
원리를 적용하기에 적합하다.&lt;br /&gt;
주어진 범위에 대해 생성자로부터 &lt;strong&gt;셀프 넘버가 아닌 숫자들을 걸러낸다면, 결국에는 셀프 넘버만 남게 된다&lt;/strong&gt;.&lt;br /&gt;
(에라토스테네스의 체로 소수를 구하는 방법은 &lt;a href=&quot;https://jamesu.dev/posts/2019/12/23/codeforces-problem-solving-230b-t-primes&quot; target=&quot;_blank&quot;&gt;Codeforces 문제 풀이: 230B - T-primes&lt;/a&gt; 포스트에서 확인할 수 있다.)&lt;/p&gt;

&lt;p&gt;위와 같은 원리로, 10001개 요소를 가지는 배열 &lt;code class=&quot;highlighter-rouge&quot;&gt;sn&lt;/code&gt;을 정의하고, 셀프 넘버만 남기도록 체를 거른다.&lt;br /&gt;
그리고 다시 순회하며 셀프 넘버만 출력하면 된다.&lt;br /&gt;
참고로 10001개 요소를 선언한 이유는 0을 제외한 숫자 맵핑을 쉽게 하기 위해서다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="baekjoon" /><category term="sieve-of-eratosthenes" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">기본 상태바 스타일을 Dark로 만드는 방법</title><link href="https://jamesu.dev/posts/2020/03/31/how-to-make-default-status-bar-style-dark/" rel="alternate" type="text/html" title="기본 상태바 스타일을 Dark로 만드는 방법" /><published>2020-03-31T00:00:00+09:00</published><updated>2020-03-31T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/03/31/how-to-make-default-status-bar-style-dark</id><content type="html" xml:base="https://jamesu.dev/posts/2020/03/31/how-to-make-default-status-bar-style-dark/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;User Interface Style&lt;/code&gt; 키에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Light&lt;/code&gt; 값을 설정한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;특정 화면만 다르게 설정하고 싶다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;preferredStatusBarStyle&lt;/code&gt; 프로퍼티를 이용한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;인터페이스 스타일과 상태바 스타일은 반대의 값을 사용한다.&lt;br /&gt;
(예: 인터페이스 스타일이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dark&lt;/code&gt;이면, 상태바 스타일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Light Content&lt;/code&gt;이다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;키보드 및 특정 뷰의 기본 배경색 등은 인터페이스 스타일을 따라간다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;기본-상태바-스타일-바꾸기&quot;&gt;기본 상태바 스타일 바꾸기&lt;/h2&gt;

&lt;p&gt;요즘 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dark Mode&lt;/code&gt;가 대세(?)라 그런지 많은 앱이 그것에 맞춰 디자인 되고 있다.&lt;br /&gt;
하지만, 무조건 그 대세를 따르라는 법은 없다!&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Light Mode&lt;/code&gt;를 선호하는 사람을 위해 밝은(?) 디자인으로 된 앱을 개발한다고 하자.&lt;br /&gt;
그렇게 밝은(?) 디자인의 앱을 개발하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dark Mode&lt;/code&gt;에서 앱을 실행했는데,
상단의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Status Bar&lt;/code&gt;가 하얀 글씨로 되어있기 때문에 잘 안 보이는 상황이 발생했다.&lt;/p&gt;

&lt;p&gt;그러면, 다음과 같이 뷰 컨트롤러마다 &lt;code class=&quot;highlighter-rouge&quot;&gt;Status Bar Style&lt;/code&gt;을 지정해 줄 것인가?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preferredStatusBarStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIStatusBarStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;darkContent&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이는 매우 수고스러운 일이 될 것이다.&lt;/p&gt;

&lt;p&gt;이러한 수고를 피하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Default Status Bar Style&lt;/code&gt;을 지정하고 싶다면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt; 파일에 들어가보자.&lt;br /&gt;
그리고 아래와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;User Interface Style&lt;/code&gt; 키를 추가해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Light&lt;/code&gt; 값을 설정하도록 하자.&lt;br /&gt;
(실제 &lt;code class=&quot;highlighter-rouge&quot;&gt;XML&lt;/code&gt; 코드로는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIUserInterfaceStyle&lt;/code&gt; 키를 가진다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그러면 앱의 기본 인터페이스가 밝은(?) 스타일이 되면서, &lt;code class=&quot;highlighter-rouge&quot;&gt;Dark Mode&lt;/code&gt;가 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;Light Mode&lt;/code&gt;로 설정된다.&lt;br /&gt;
만약, 특정 뷰 컨트롤러만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Light Status Bar&lt;/code&gt;를 갖고 싶다면,
첫 번째 코드에서 뷰 컨트롤러의 &lt;code class=&quot;highlighter-rouge&quot;&gt;preferredStatusBarStyle&lt;/code&gt; 프로퍼티가 &lt;code class=&quot;highlighter-rouge&quot;&gt;.darkContent&lt;/code&gt;가 아닌 &lt;code class=&quot;highlighter-rouge&quot;&gt;.lightContent&lt;/code&gt;를 반환하도록 작성하면 된다.&lt;br /&gt;
인터페이스 스타일이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dark&lt;/code&gt;일 때, 상태바의 스타일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Light Content&lt;/code&gt;로 반대의 색을 가진다는 것에 주의하자.&lt;/p&gt;

&lt;p&gt;참고로 &lt;code class=&quot;highlighter-rouge&quot;&gt;User Interface Style&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Light&lt;/code&gt;로 설정하면, 키보드 및 특정 뷰의 기본 배경색 등이 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;Light&lt;/code&gt; 스타일이 된다.
마찬가지로 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dark&lt;/code&gt;로 설정 시, 모두 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dark&lt;/code&gt; 스타일로 고정된다.&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="swift" /><category term="dark-mode" /><summary type="html">TL;DR</summary></entry><entry><title type="html">Xcode 11에서 Archive 버튼이 비활성화된 경우</title><link href="https://jamesu.dev/posts/2020/03/25/when-archive-disabled-in-xcode-11/" rel="alternate" type="text/html" title="Xcode 11에서 Archive 버튼이 비활성화된 경우" /><published>2020-03-25T00:00:00+09:00</published><updated>2020-03-25T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/03/25/when-archive-disabled-in-xcode-11</id><content type="html" xml:base="https://jamesu.dev/posts/2020/03/25/when-archive-disabled-in-xcode-11/">&lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;시뮬레이터를 &lt;code class=&quot;highlighter-rouge&quot;&gt;Generic iOS Device&lt;/code&gt;로 선택하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt; 버튼이 활성화된다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;archive-버튼이-비활성화된-경우&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt; 버튼이 비활성화된 경우&lt;/h2&gt;

&lt;p&gt;편의상 실제 기기가 아닌 시뮬레이터를 이용해 개발을 하는 경우가 많을 것이라 생각된다.&lt;br /&gt;
그렇게 시뮬레이터를 이용하다가 빌드를 App Store Connect에 업로드 하고 싶을 때,
다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt; 버튼이 비활성화되어 있어 업로드를 할 수 없는 상황에 직면할 때가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이럴 땐 당황하지 말고, 시뮬레이터 부분을 클릭해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Generic iOS Device&lt;/code&gt;로 변경하자.&lt;br /&gt;
그러면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Archive&lt;/code&gt; 버튼이 예쁘게 활성화되어 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_2.png&quot; alt=&quot;Figure 2&quot; /&gt;&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="xcode" /><summary type="html">TL;DR</summary></entry><entry><title type="html">백준 문제 풀이: 7568 - 덩치</title><link href="https://jamesu.dev/posts/2020/02/03/baekjoon-problem-solving-7568/" rel="alternate" type="text/html" title="백준 문제 풀이: 7568 - 덩치" /><published>2020-02-03T00:00:00+09:00</published><updated>2020-02-03T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/02/03/baekjoon-problem-solving-7568</id><content type="html" xml:base="https://jamesu.dev/posts/2020/02/03/baekjoon-problem-solving-7568/">&lt;p&gt;&lt;img src=&quot;assets/baekjoon_7568.png&quot; alt=&quot;7568 - 덩치&quot; title=&quot;7568 - 덩치&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/7568&quot; target=&quot;_blank&quot;&gt;7568 - 덩치 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;몸무게와 키가 모두 커지야지만 덩치가 더 큰 것이 된다.&lt;br /&gt;
같은 등수가 여러명인 경우, 그만큼 그 다음 등수는 밀린다는 점에 주의한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;문제에서 등수를 구하기 때문에 정렬을 생각해볼 수 있지만, 단순하게 정렬은 이 문제를 해결해 주지 못한다.
정렬의 기준을 잡기도 모호하고, 동일한 등수에 대한 처리가 필요하기 때문이다.
이 문제의 경우, 자원과 입력의 제한이 크지 않기 때문에 정말 단순한 방법인 &lt;a href=&quot;https://namu.wiki/w/%EB%B8%8C%EB%A3%A8%ED%8A%B8%20%ED%8F%AC%EC%8A%A4&quot; target=&quot;_blank&quot;&gt;브루트 포스(Brute Force)&lt;/a&gt; 알고리즘을 적용해 볼 수 있다.&lt;/p&gt;

&lt;p&gt;브루트 포스는 &lt;strong&gt;경우의 수를 모두 순회하며 원하는 결과 값을 얻는 방법&lt;/strong&gt;을 말한다.
단순하게 순회하는 것이기 때문에 알고리즘을 생각해내기 수월하지만, 자원이 한정되어 있는 경우 문제가 발생할 수 있다.
특히, 입력 범위가 넓은 경우, 시간 제한에 걸릴 수 있으니 다른 알고리즘을 생각해내야 한다.&lt;/p&gt;

&lt;p&gt;이런 단점이 있기 때문에 자원 제한이 있는 경우, 다른 알고리즘을 생각해내기 위한 사전 수단으로 이용되기도 한다.
개념적으로는 단순히 경우의 수를 대입해 보면서 알아보는 것이기 때문이다.
그 과정에서 규칙이나 구조를 파악하며 다른 알고리즘을 생각해낼 수 있다.&lt;/p&gt;

&lt;p&gt;이 문제에서는 한 명마다 모든 인원을 비교하면서, 덩치가 작은 경우 등수가 밀리도록 했다.
본인을 비교할 때 등수가 밀리지 않도록 주의한다.
이렇게 모든 경우의 수를 비교하면 자연스럽게 덩치에 따라 등수가 밀리므로, 동일한 덩치에 대해서는 같은 등수가 된다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rankings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rankings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rankings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="baekjoon" /><category term="brute-force" /><category term="python" /><summary type="html"></summary></entry><entry><title type="html">Xcode 11에서 스토리보드와 SceneDelegate 없이 Swift 프로젝트 시작하기</title><link href="https://jamesu.dev/posts/2020/01/16/starting-swift-project-without-storyboard-and-scenedelegate-in-xcode-11/" rel="alternate" type="text/html" title="Xcode 11에서 스토리보드와 SceneDelegate 없이 Swift 프로젝트 시작하기" /><published>2020-01-16T00:00:00+09:00</published><updated>2020-01-16T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/01/16/starting-swift-project-without-storyboard-and-scenedelegate-in-xcode-11</id><content type="html" xml:base="https://jamesu.dev/posts/2020/01/16/starting-swift-project-without-storyboard-and-scenedelegate-in-xcode-11/">&lt;h2 id=&quot;개요&quot;&gt;개요&lt;/h2&gt;

&lt;p&gt;뷰를 구성하는 방법은 Code, Storyboard, NIB(XIB) 등 외에 최근에 추가된 SwiftUI까지 다양한 방법이 존재한다.
각 방법은 장단점이 존재해 어떤 것이 Best Practice라고 단정하기 어렵다.
프로젝트 상황에 맞춰 장단점을 고려해 적절히 선택해야 한다.&lt;/p&gt;

&lt;p&gt;여기서는 그 중에 &lt;strong&gt;Code 기반 프로젝트&lt;/strong&gt;를 시작하기 위해, Xcode에서 프로젝트를 생성하면 &lt;strong&gt;기본적으로 추가되는 스토리보드를 제거하는 방법&lt;/strong&gt;을 알려준다.&lt;/p&gt;

&lt;p&gt;추가적으로 &lt;strong&gt;Xcode 11&lt;/strong&gt;에서 새 프로젝트를 생성한다면, 처음 보는 &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneDelegate.swift&lt;/code&gt; 파일이 생겼을 것이다.
이는 &lt;strong&gt;iOS 13&lt;/strong&gt;을 위해 새로 생긴 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindowSceneDelegate&lt;/code&gt; 프로토콜을 구현한 클래스로, &lt;strong&gt;Scene&lt;/strong&gt; 개념을 적용할 수 있게 해준다.
만약, 이전 버전처럼 Scene 개념을 적용할 필요가 없다면 굳이 필요하지 않은 부분이므로, &lt;strong&gt;SceneDelegate를 제거하는 방법&lt;/strong&gt;까지 알아보도록 하자.&lt;/p&gt;

&lt;p&gt;Scene 개념에 대해 더 자세히 알아보고 싶다면, 다음 링크들을 참고하길 바란다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/app_and_environment/managing_your_app_s_life_cycle&quot; target=&quot;_blank&quot;&gt;Managing Your App’s Life Cycle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/documentation/uikit/app_and_environment/scenes&quot; target=&quot;_blank&quot;&gt;Scenes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;스토리보드-제거&quot;&gt;스토리보드 제거&lt;/h2&gt;

&lt;p&gt;스토리보드를 제거하기 위해선 프로젝트가 생성되면서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt;와 연동된 부분을 끊으면 된다.&lt;/p&gt;

&lt;h3 id=&quot;1-프로젝트에서-main-스토리보드-설정을-제거한다-이때-프로젝트-설정을-이용하면-편리하다&quot;&gt;1. 프로젝트에서 Main 스토리보드 설정을 제거한다. 이때, 프로젝트 설정을 이용하면 편리하다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/figures/removing_storyboard/1_1.png&quot; alt=&quot;Removing Storyboard Step 1-1&quot; width=&quot;100%&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_storyboard/1_2.png&quot; alt=&quot;Removing Storyboard Step 1-2&quot; width=&quot;100%&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_storyboard/1_3.png&quot; alt=&quot;Removing Storyboard Step 1-3&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 프로젝트 설정에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Main Interface&lt;/code&gt; 항목의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Main&lt;/code&gt; 값을 지우면, &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;에도 반영된다.&lt;br /&gt;
만약, &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;Main storyboard file base name&lt;/code&gt; 항목이 남아있다면, 제거하도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;2-xcode-11의-경우-infoplist의-scene-관련-항목에서-storyboard-name-항목을-제거한다&quot;&gt;2. Xcode 11의 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;의 Scene 관련 항목에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Storyboard Name&lt;/code&gt; 항목을 제거한다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/figures/removing_storyboard/2_1.png&quot; alt=&quot;Removing Storyboard Step 2-1&quot; width=&quot;100%&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_storyboard/2_2.png&quot; alt=&quot;Removing Storyboard Step 2-2&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-mainstoryboard-파일을-삭제한다&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;Main.storyboard&lt;/code&gt; 파일을 삭제한다.&lt;/h3&gt;

&lt;p&gt;해당 파일은 더 이상 사용하지 않으므로 삭제하도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;4-viewcontroller의-기본-뷰에-배경색을-입히고-scenedelegate에-연동한-후-앱을-실행시켜-적용한-배경색이-잘-뜨는지-확인한다&quot;&gt;4. &lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;의 기본 뷰에 배경색을 입히고 &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneDelegate&lt;/code&gt;에 연동한 후, 앱을 실행시켜 적용한 배경색이 잘 뜨는지 확인한다.&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SceneDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindowSceneDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;willConnectTo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UISceneSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;connectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIScene&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ConnectionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scene&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;windowScene&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;앱이 실행되면, 빨간색 배경이 보이는 것을 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;scenedelegate-제거&quot;&gt;SceneDelegate 제거&lt;/h2&gt;

&lt;p&gt;기존에 &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneDelegate&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindow&lt;/code&gt;를 설정하는 부분을 예전처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;로 옮기고, Scene 관련 파일과 설정을 제거하면 된다.&lt;/p&gt;

&lt;h3 id=&quot;1-appdelegate에서-scene-관련-함수-정의부를-제거한다&quot;&gt;1. &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;에서 Scene 관련 함수 정의부를 제거한다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/figures/removing_scenedelegate/1_1.png&quot; alt=&quot;Removing SceneDelegate Step 1-1&quot; width=&quot;100%&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_scenedelegate/1_2.png&quot; alt=&quot;Removing SceneDelegate Step 1-2&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-appdelegate에-uiwindow-설정-로직을-추가한다&quot;&gt;2. &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIWindow&lt;/code&gt; 설정 로직을 추가한다.&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;@UIApplicationMain&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplicationDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinishLaunchingWithOptions&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;launchOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;LaunchOptionsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;3-scenedelegateswift-파일을-삭제한다&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;SceneDelegate.swift&lt;/code&gt; 파일을 삭제한다.&lt;/h3&gt;

&lt;p&gt;해당 파일은 더 이상 사용하지 않으므로 삭제하도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;4-infoplist에서-application-scene-manifest-항목을-통째로-제거한다&quot;&gt;4. &lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Application Scene Manifest&lt;/code&gt; 항목을 통째로 제거한다.&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;assets/figures/removing_scenedelegate/3_1.png&quot; alt=&quot;Removing SceneDelegate Step 3-1&quot; width=&quot;100%&quot; /&gt;
&lt;img src=&quot;assets/figures/removing_scenedelegate/3_2.png&quot; alt=&quot;Removing SceneDelegate Step 3-2&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-앱을-실행시켜-앞서-적용한-배경색이-잘-뜨는지-확인한다&quot;&gt;5. 앱을 실행시켜 앞서 적용한 배경색이 잘 뜨는지 확인한다.&lt;/h3&gt;

&lt;p&gt;앱이 실행되고 빨간색 배경이 보이면, 잘 적용된 것이다. 🙂&lt;/p&gt;</content><author><name>jamesujeon</name></author><category term="swift" /><category term="xcode" /><category term="storyboard" /><category term="scene" /><summary type="html">개요</summary></entry><entry><title type="html">백준 문제 풀이: 11727 - 2×n 타일링 2</title><link href="https://jamesu.dev/posts/2020/01/14/baekjoon-problem-solving-11727/" rel="alternate" type="text/html" title="백준 문제 풀이: 11727 - 2×n 타일링 2" /><published>2020-01-14T00:00:00+09:00</published><updated>2020-01-14T00:00:00+09:00</updated><id>https://jamesu.dev/posts/2020/01/14/baekjoon-problem-solving-11727</id><content type="html" xml:base="https://jamesu.dev/posts/2020/01/14/baekjoon-problem-solving-11727/">&lt;p&gt;&lt;img src=&quot;assets/baekjoon_11727.png&quot; alt=&quot;11727 - 2×n 타일링 2&quot; title=&quot;11727 - 2×n 타일링 2&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;문제-파악&quot;&gt;문제 파악&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://www.acmicpc.net/problem/11727&quot; target=&quot;_blank&quot;&gt;2×n 타일링 2 문제 링크&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2xn 직사각형을 채울 때, 2x1, 2x2 타일만 사용할 수 있으며, 2x1은 가로로 채울 수도, 세로로 채울 수도 있다.&lt;br /&gt;
또한, 사용한 개수에 상관없이 채운 모양에 따라 경우의 수가 결정되는 점을 주의해야 한다.&lt;/p&gt;

&lt;h2 id=&quot;문제-풀이&quot;&gt;문제 풀이&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;에 따라 반복되는 구조인 것을 확인할 수 있으므로, &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%8F%99%EC%A0%81_%EA%B3%84%ED%9A%8D%EB%B2%95&quot; target=&quot;_blank&quot;&gt;동적 계획법(Dynamic Programming)&lt;/a&gt;을 사용하도록 한다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;이 작을 때부터 차례대로 구해가며, 최종적으로 입력한 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;에 대한 방법의 수를 구할 수 있을 것이다.&lt;/p&gt;

&lt;p&gt;일단, 필요한 초기값을 생각해보면, 1개의 타일로 채울 수 있는 최대의 너비는 2이므로, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;이 1일 때와 2일 때의 값은 구해야 한다.
이 경우, 방법의 수가 매우 적으므로 직접 구할 수 있다.&lt;/p&gt;

&lt;p&gt;구한 방법의 수를 &lt;code class=&quot;highlighter-rouge&quot;&gt;counts&lt;/code&gt;에 담는다고 하면, &lt;code class=&quot;highlighter-rouge&quot;&gt;counts[1] = 1, counts[2] = 3&lt;/code&gt;이 된다.&lt;/p&gt;

&lt;p&gt;이제 임의의 수 &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt;에 대한 경우의 수, &lt;code class=&quot;highlighter-rouge&quot;&gt;counts[n]&lt;/code&gt;을 생각해보자.&lt;br /&gt;
다음과 같이 직사각형의 맨 앞부분에 최소의 타일만 사용해 채워보면, &lt;strong&gt;나머지는 부분에 대한 경우의 수&lt;/strong&gt;인 것을 알 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;assets/figure_1.png&quot; alt=&quot;Figure 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;따라서, 점화식 &lt;code class=&quot;highlighter-rouge&quot;&gt;counts[n] = counts[n - 1] + counts[n - 2] * 2&lt;/code&gt;를 구할 수 있다.&lt;/p&gt;

&lt;p&gt;이처럼 동적 계획법에서는 &lt;strong&gt;반복되는 규칙&lt;/strong&gt;을 찾아내는 눈을 기르는 게 중요한 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;풀이-소스&quot;&gt;풀이 소스&lt;/h2&gt;

&lt;p&gt;문제 풀이 환경: Python 3.7&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10007&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content><author><name>jamesujeon</name></author><category term="problem-solving" /><category term="baekjoon" /><category term="dynamic-programming" /><category term="python" /><summary type="html"></summary></entry></feed>